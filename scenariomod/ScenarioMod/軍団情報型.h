/*
 * 軍団情報型
 */
#pragma once
#pragma pack(1)

#include <windows.h>



/*
	軍団情報(21*214)

	[21バイト]

	0-1	前の軍団
	2-3 後ろの軍団
	4-5	居城名ナンバー
	6-7	軍団長ナンバー(武将名前テーブルの順番)
	8-9	大名
	10	行動力
	11-12	金
	13-14	米
	15-16	騎馬
	17-18	鉄砲
	19	？
	20	aaaabbbb A 役職 B 軍団番号
		0 無し 1 征夷大将軍 2 管領 3 関東管領 4 奥州探題 5 西国探題 6 九州探題 7 羽州探題 ⇒ Get_軍団役職

 */
struct 軍団情報型
{
	WORD 前の軍団【軍団番号】;	/// <summary>あまり使わない。リンクリストで前の軍団</summary>
	WORD 次の軍団【軍団番号】;	/// <summary>とくに使わない。リンクリストで次の軍団</summary>
	WORD 所属居城【城番号】;	/// <summary>軍団長が居る城の城番号</summary>
	WORD 軍団長【武将番号】;	/// <summary>軍団長のp武将情報としての武将番号</summary>
	WORD 所属大名【大名番号】;	/// <summary>軍団が所属している大名のp大名情報としての大名番号</summary>
	byte 行動力;				/// <summary>行動力</summary>
	WORD 金;					/// <summary>金</summary>
	WORD 米;					/// <summary>米</summary>
	WORD 馬;					/// <summary>馬</summary>
	WORD 鉄砲;					/// <summary>鉄砲</summary>
	byte _未定義1;				/// <summary>must 0?</summary>
	byte 軍団割当番号:4;		/// <summary>1-8 ⇒ 軍団割り当て番号</summary>
	byte _役職:4;				/// <summary>役職  <para>(0 無し 1 征夷大将軍 2 管領 3 関東管領 4 奥州探題 5 西国探題 6 九州探題 7 羽州探題)</para><para>これを直接利用するのではなく、Get_軍団役職で値を得ること。</para></summary>
};

namespace 関数 {

	/// <summary>
	/// とある軍団に所属する兵士の総数を得る
	/// <para>返り値：兵士総数</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <returns>兵士の総数</returns>
	int Get_軍団兵数(int 軍団番号【配列用】);


	/// <summary>
	/// 現在(その瞬間)、天翔記に存在する軍団の「軍団番号【配列用】」をリストで得る。
	/// <para>返り値：有効な軍団の、軍団番号【配列用】を番号リスト型で得る。</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <param name="新所属大名番号【配列用】">鞍替え先の大名の「配列用」の番号</param>
	/// <returns>成功すれば真、失敗すれば偽</returns>
	番号リスト型 Get_軍団番号リスト【配列用】() ;


	/// <summary>
	/// <para>対象の大名に所属する軍団の、軍団番号【配列用】を、リストとして得る。</para>
	/// <para>返り値：軍団番号【配列用】をリストとして得る。</para>
	/// </summary>
	/// <param name="大名番号【配列用】">対象となる大名の「配列用」の番号</param>
	/// <returns>軍団番号【配列用】をリストとして得る。</returns>
	番号リスト型 Get_大名麾下軍団番号リスト【配列用】(int 大名番号【配列用】);


	/// <summary>
	/// <para>対象の軍団に所属する、有効な武将の武将番号【配列用】を、リストとして得る。</para>
	/// <para>返り値：指定軍団麾下の「大名・軍団長・現役」の武将番号【配列用】のリストを得る。</para>
	/// </summary>
	/// <param name="大名番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <returns>指定軍団麾下の「大名・軍団長・現役」の武将番号【配列用】のリスト</returns>
	番号リスト型 Get_軍団麾下武将番号リスト【配列用】(int 軍団番号【配列用】);


	/// <summary>
	/// <para>とある大名配下の軍団に関して、「１〜８の軍団割り当て番号」で使用済みの番号のリストを得る。</para>
	/// <para>要するに、特定の大名に「第１軍団、第３軍団、第４軍団」がすでに設立されている、といったことを得る関数。</para>
	/// <para>返り値：「軍団割り当て番号」のリストを番号リスト形式で得る。</para>
	/// <para>このリストの値は、必ず昇順にソートされている。</para>
	/// </summary>
	/// <param name="大名番号【配列用】">対象となる大名の「配列用」の番号</param>
	/// <returns>
	/// <para>「軍団割り当て済みの１〜８の番号」のリストを番号リスト形式で得る。</para>
	/// <para>このリストの値は、必ず昇順にソートされている。</para>
	/// </returns>
	番号リスト型 Get_軍団割当番号リスト(int 大名番号【配列用】);


	/// <summary>
	/// <para>とある大名配下の軍団に関して、「１〜８の軍団割り当て番号」でまだ使用されていない番号のリストを得る。</para>
	/// <para>要するに、特定の大名に「第２軍団、第５軍団、第６軍団、第７軍団」がすでに設立されている、といったことを得る関数。</para>
	/// <para>返り値：１〜８の番号のうち、まだ割り当てられていない番号を番号リスト形式で得る。</para>
	/// <para>このリストの値は、必ず昇順にソートされている。</para>
	/// </summary>
	/// <param name="大名番号【配列用】">対象となる大名の「配列用」の番号</param>
	/// <returns>
	/// <para>「軍団にまだ割り当てられていない１〜８の番号」のリストを番号リスト形式で得る。</para>
	/// <para>このリストの値は、必ず昇順にソートされている。</para>
	/// </returns>
	番号リスト型 Get_軍団未割当番号リスト(int 大名番号【配列用】);



	/// <summary>
	/// <para>第２軍団以降で、軍団の割り当て番号を交換・変更する。</para>
	/// <para>返り値：成功すれば真・失敗すれば偽</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <param name="新割当番号">新たな割り当て番号。１〜８</param>
	/// <returns>
	/// <para>「軍団割り当て済みの１〜８の番号」のリストを番号リスト形式で得る。</para>
	/// <para>このリストの値は、必ず昇順にソートされている。</para>
	/// </returns>
	bool Set_軍団割当番号変更(int 軍団番号【配列用】, int 新割当番号);

}

namespace 関数 {

	/// <summary>
	/// <para>とある軍団に、軍師が居れば、その軍師の武将番号【配列用】を得る。</para>
	/// <para>返り値：</para>
	/// <para>軍師が居れば、軍師の武将番号【配列用】が返ってくる。</para>
	/// <para>居なければ0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <returns>
	/// <para>軍師が居れば、軍師の武将番号【配列用】が返ってくる。</para>
	/// <para>居なければ0xFFFFが返ってくる。</para>
	/// </returns>
	int Get_軍師武将番号【配列用】(int 軍団番号【配列用】);


}


struct 軍団新設候補情報型 {
	int 大名番号【配列用】;                     /// <summary>どの大名についての情報なのか。</summary>
	BOOL Is新設可能;                            /// <summary>結局、以下の３要素から考えて、軍団の新設は可能なのか、不可能なのか。</summary>
	番号リスト型 候補軍団割当番号リスト;        /// <summary>軍団割当番号（１〜８）で余っている番号のリスト。Get_軍団未割当番号リスト(...) と同じ値</summary>
	番号リスト型 候補城番号【配列用】リスト;    /// <summary>もし軍団を新設出来るとすれば、これらの城が候補となる、というリスト</summary>
	番号リスト型 候補武将番号【配列用】リスト;  /// <summary>もし軍団を新設出来るとすれば、これらの武将が新たな軍団長として任命され得る、というリスト</summary>
};


namespace 関数 {
	/// <summary>
	/// <para>とある大名家に軍団を新設可能かどうかを問い合わせる</para>
	/// <para>その結果、「可不可」「どの武将が候補か」「どの城が候補か」といった情報が得られる</para>
	/// <para>この関数で得られた情報を元に、 Set_軍団新設(...)関数で軍団を実際に新設することとなる。</para>
	/// <para>返り値：</para>
	/// <para>軍団新設候補情報型の値が返ってくる。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">軍団長にしたい武将番号【配列用】</param>
	/// <param name="城番号【配列用】">軍団を新設したい城番号【配列用】</param>
	/// <param name="安全チェック用軍団新設候補情">Get_軍団新設候補情報(...)関数の結果値を渡す必要がある。</param>
	/// <returns>
	/// <para>軍団新設候補情報型の値が返ってくる。</para>
	/// </returns>
	軍団新設候補情報型 Get_軍団新設候補情報(int 大名番号【配列用】);


	/// <summary>
	/// <para>とある大名家に軍団を新設する</para>
	/// <para>返り値：</para>
	/// <para>新設できた場合は、軍団番号【配列用】が返ってくる</para>
	/// <para>新設できなかった場合0xFFFFが返ってくる。</para>
	/// <para>Get_軍団新設候補情報()の返り値に基づいて、使うことが想定されている。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">軍団長にしたい武将番号【配列用】</param>
	/// <param name="城番号【配列用】">軍団を新設したい城番号【配列用】</param>
	/// <param name="安全チェック用軍団新設候補情報">Get_軍団新設候補情報(...)関数の結果値を渡す必要がある。</param>
	/// <returns>
	/// <para>新設できた場合は、軍団番号【配列用】が返ってくる。</para>
	/// <para>新設できなかった場合0xFFFFが返ってくる。</para>
	/// </returns>
	int Set_軍団新設(int 武将番号【配列用】, int 城番号【配列用】, 軍団新設候補情報型 安全チェック用軍団新設候補情報);

	/// <summary>
	/// <para>とある「１つの大名の下に軍団Ａと軍団Ｂ」があるとして、</para>
	/// <para>その大名の下にある「軍団Ａの城」を「別の軍団Ｂ」へと移設する</para>
	/// <para>但し、非本拠に限る(非本拠とは軍団長や大名が居ない城)</para>
	/// <para>返り値：</para>
	/// <para>成功した場合は真</para>
	/// <para>失敗した場合は真</para>
	/// </summary>
	/// <param name="城番号【配列用】">別の軍団下に移設したい城の「配列用」番号</param>
	/// <param name="宛先軍団番号【配列用】】">城の新たな移設先の軍団の「配列用」番号</param>
	/// <returns>
	/// <para>成功した場合は真</para>
	/// <para>失敗した場合は真</para>
	/// </returns>
	bool Set_非本拠城所属軍団(int 城番号【配列用】, int 宛先軍団番号【配列用】);


	/// <summary>
	/// <para>とある大名家に所属している軍団を独立させ、大名とする</para>
	/// <para>返り値：</para>
	/// <para>独立できた場合は、大名番号【配列用】が返ってくる</para>
	/// <para>独立できなかった場合0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">独立させたい軍団番号【配列用】</param>
	/// <returns>
	/// <para>独立できた場合は、大名番号【配列用】が返ってくる</para>
	/// <para>独立できなかった場合0xFFFFが返ってくる。</para>
	/// </returns>
	int Set_軍団独立(int 軍団番号【配列用】);


	/// <summary>
	/// 指定の軍団が所属する大名を、勢力を越えて変更する。
	/// <para>大名Ａの麾下の軍団αを、大名Ｂの麾下へと軍団ごと鞍替えするということ。</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <param name="宛先大名番号【配列用】">鞍替え先の大名の「配列用」の番号</param>
	/// <returns>成功すれば真、失敗すれば偽</returns>
	bool Set_軍団所属大名(int 軍団番号【配列用】, int 宛先大名番号【配列用】);
}


/*
	プレイヤの担当軍団(大名番号ではなく軍団番号)。最大８つ。
*/
struct プレイヤ担当軍団情報型
{
	WORD 担当軍団【軍団番号】;
};


namespace 関数 {

	/// <summary>
	/// <para>対象の大名がプレイヤー担当の大名であるかどうかを判断する。</para>
	/// <para>返り値：プレイヤーが担当している大名ならば真、そうでなければ偽</para>
	/// </summary>
	/// <param name="大名番号【配列用】">対象となる大名の「配列用」の番号</param>
	/// <returns>
	/// <para>プレイヤーが担当している大名ならば真、そうでなければ偽</para>
	/// </returns>
	bool Is_プレイヤ担当大名(WORD 大名番号【配列用】);

	/// <summary>
	/// <para>対象の軍団がプレイヤー担当の大名の配下軍団であるかどうかを判断する。</para>
	/// <para>返り値：プレイヤーが担当している大名の配下軍団ならば真、そうでなければ偽</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <returns>
	/// <para>プレイヤーが担当している大名の配下軍団ならば真、そうでなければ偽</para>
	/// </returns>
	bool Is_プレイヤ担当軍団(WORD 軍団番号【配列用】);

	/// <summary>
	/// <para>対象の武将がプレイヤー担当の大名の配下武将であるかどうかを判断する。</para>
	/// <para>返り値：プレイヤーが担当している大名の配下武将ならば真、そうでなければ偽</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <returns>
	/// <para>プレイヤーが担当している大名の配下武将ならば真、そうでなければ偽</para>
	/// </returns>
	bool Is_プレイヤ担当武将(WORD 武将番号【配列用】);

}



