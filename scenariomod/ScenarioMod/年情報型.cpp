#include "ゲームデータ構造.h"


/*
 YYYY/MM/DDから元号を得る
 */

struct NB6GENGO {
	char gengou[9];
	int start_YMD;
};

NB6GENGO gengo_list[] = {
	""	  ,        0,
	"大同",  8060608,
	"弘仁",  8101020,
	"天長",  8240208,
	"承和",  8340214,
	"嘉祥",  8480716,
	"仁寿",  8510601,
	"斉衡",  8541223,
	"天安",  8570320,
	"貞観",  8590520,
	"元慶",  8770601,
	"仁和",  8850311,
	"寛平",  8890530,
	"昌泰",  8980520,
	"延喜",  9010831,
	"延長",  9230529,
	"承平",  9310516,
	"天慶",  9380622,
	"天暦",  9470515,
	"天徳",  9571121,
	"応和",  9610305,
	"康保",  9640819,
	"安和",  9680908,
	"天禄",  9700503,
	"天延",  9740116,
	"貞元",  9760811,
	"天元",  9781231,
	"永観",  9830529,
	"寛和",  9850519,
	"永延",  9870505,
	"永祚",  9890910,
	"正暦",  9901126,
	"長徳",  9950325,
	"長保",  9990201,
	"寛弘", 10040808,
	"長和", 10120208,
	"寛仁", 10170521,
	"治安", 10210317,
	"万寿", 10240819,
	"長元", 10280818,
	"長暦", 10370509,
	"長久", 10401216,
	"寛徳", 10441216,
	"永承", 10460522,
	"天喜", 10530202,
	"康平", 10580919,
	"治暦", 10650904,
	"延久", 10690506,
	"承保", 10740916,
	"承暦", 10771205,
	"永保", 10810322,
	"応徳", 10840315,
	"寛治", 10870511,
	"嘉保", 10950123,
	"永長", 10970103,
	"承徳", 10971227,
	"康和", 10990915,
	"長治", 11040308,
	"嘉承", 11060513,
	"天仁", 11080909,
	"天永", 11100731,
	"永久", 11130825,
	"元永", 11180425,
	"保安", 11200509,
	"天治", 11240518,
	"大治", 11260215,
	"天承", 11310228,
	"長承", 11320921,
	"保延", 11350610,
	"永治", 11410813,
	"康治", 11420525,
	"天養", 11440328,
	"久安", 11450812,
	"仁平", 11510214,
	"久寿", 11541204,
	"保元", 11560518,
	"平治", 11590509,
	"永暦", 11600218,
	"応保", 11610924,
	"長寛", 11630504,
	"永万", 11650714,
	"仁安", 11660923,
	"嘉応", 11690506,
	"承安", 11710527,
	"安元", 11750816,
	"治承", 11770829,
	"養和", 11810825,
	"寿永", 11820629,
	"元暦", 11840527,
	"文治", 11850909,
	"建久", 11900516,
	"正治", 11990523,
	"建仁", 12010319,
	"元久", 12040323,
	"建永", 12060605,
	"承元", 12071116,
	"建暦", 12110423,
	"建保", 12140118,
	"承久", 12190527,
	"貞応", 12220525,
	"元仁", 12241231,
	"嘉禄", 12250528,
	"安貞", 12280118,
	"寛喜", 12290331,
	"貞永", 12320423,
	"天福", 12330525,
	"文暦", 12341127,
	"嘉禎", 12351101,
	"暦仁", 12381230,
	"延応", 12390313,
	"仁治", 12400805,
	"寛元", 12430318,
	"宝治", 12470405,
	"建長", 12490502,
	"康元", 12561024,
	"正嘉", 12570331,
	"正元", 12590420,
	"文応", 12600524,
	"弘長", 12610322,
	"文永", 12640327,
	"建治", 12750522,
	"弘安", 12780323,
	"正応", 12880529,
	"永仁", 12930906,
	"正安", 12990525,
	"乾元", 13021210,
	"嘉元", 13030916,
	"徳治", 13060118,
	"延慶", 13081122,
	"応長", 13110517,
	"正和", 13120427,
	"文保", 13170316,
	"元応", 13190518,
	"元亨", 13210322,
	"正中", 13241225,
	"嘉暦", 13260528,
	"元徳", 13290922,
	"元弘", 13310911,
	"建武", 13340305,
	"暦応", 13381011,
	"康永", 13420601,
	"貞和", 13451115,
	"観応", 13500404,
	"文和", 13521104,
	"延文", 13560429,
	"康安", 13610504,
	"貞治", 13621011,
	"応安", 13680307,
	"永和", 13750329,
	"康暦", 13790409,
	"永徳", 13810320,
	"至徳", 13840319,
	"嘉慶", 13871005,
	"康応", 13890307,
	"明徳", 13900412,
	"応永", 13940802,
	"正長", 14280610,
	"永享", 14291003,
	"嘉吉", 14410310,
	"文安", 14440223,
	"宝徳", 14490816,
	"享徳", 14520810,
	"康正", 14550906,
	"長禄", 14571016,
	"寛正", 14610201,
	"文正", 14660314,
	"応仁", 14670409,
	"文明", 14690608,
	"長享", 14870809,
	"延徳", 14890916,
	"明応", 14920812,
	"文亀", 15010318,
	"永正", 15040316,
	"大永", 15210923,
	"享禄", 15280903,
	"天文", 15320829,
	"弘治", 15551107,
	"永禄", 15580318,
	"元亀", 15700527,
	"天正", 15730825,
	"文禄", 15930110,
	"慶長", 15961216,
	"元和", 16150905,
	"寛永", 16240417,
	"正保", 16450113,
	"慶安", 16480407,
	"承応", 16521020,
	"明暦", 16550518,
	"万治", 16580821,
	"寛文", 16610523,
	"延宝", 16731030,
	"天和", 16811109,
	"貞享", 16840405,
	"元禄", 16881023,
	"宝永", 17040416,
	"正徳", 17110611,
	"享保", 17160809,
	"元文", 17360607,
	"寛保", 17410412,
	"延享", 17440403,
	"寛延", 17480805,
	"宝暦", 17511214,
	"明和", 17640630,
	"安永", 17721210,
	"天明", 17810425,
	"寛政", 17890219,
	"享和", 18010319,
	"文化", 18040322,
	"文政", 18180526,
	"天保", 18310123,
	"弘化", 18450109,
	"嘉永", 18480401,
	"安政", 18550115,
	"万延", 18600408,
	"文久", 18610329,
	"元治", 18640327,
	"慶応", 18650501,
	"明治", 18681023,
	"大正", 19120730,
	"昭和", 19261225,
	"平成", 19890108,
	"令和", 20190501,
};





namespace 関数 {


// 現在の西暦を得る
int Get_西暦() {
	return p年情報.年 + Get_天翔記基準年();
}

int Get_天翔記基準年() {
	return *((WORD *)情報メモリアドレス::天翔記元年情報);
}

}

//------------------------------------------------------------------------------------------------

const char *suuji[] = {
    "〇", "一", "二", "三", "四",
    "五", "六", "七", "八", "九",
};

const char *keta[] = {
    "〇",
    "一", "十", "百", "千",
    "万", "十", "百", "千",
    "億", "十", "百", "千",
    "兆", "十", "百", "千",
};

char *arabia2kanji(const char *arb, char *knj)
{
    unsigned i, kt1, kt2, num, len, flag;
    char *sav = knj;
    *knj = '\0';
    flag = 0;
    len = strlen(arb);
    if (len < sizeof(keta)/sizeof(keta[0])) {
        for (i=0; i<len; i++) {
            num = *(arb+i) - '0'; /* 数値 */
            kt1 = len - i; /* 桁位置 */
            kt2 = kt1 % 4;
            if (num && (num > 1 || kt2 == 1 )) {
                strcat(knj, suuji[num]);
                flag = 1;
            }
            if (kt1 > 1 && (num || kt2 == 1)) {
                if (flag || num == 1) {
                    strcat(knj, keta[kt1]);
                    flag = 1;
                }
            }
            if (kt2 == 1) flag = 0;
        }
    }
    return sav;
}

namespace 関数 {

// 年・月・日より元号文字列を得る。月・日を省略した場合は、12月31日(年末の日)と見なす。
// 理由は天翔記では、とある年の途中で元号が変わっている場合、新元号の方を常に採用するため。
和暦型 Get_和暦(int 年, int 月, int 日) {

	// 返り値型
	和暦型 result;

	if ( 年==-1 ) {
		年=Get_西暦();
	}
	if ( 月==-1 ) {
		月=12;
	}
	if ( 日==-1 ) {
		日=31;
	}
	int iYMD = 年*10000+月*100+日;

	int GENGO_NUM = sizeof(gengo_list)/sizeof(gengo_list[0]);
	for ( int i=GENGO_NUM-1; i >= 0; i-- ) {
		if ( iYMD >= gengo_list[i].start_YMD ) {
			// 元号を複製
			result.元号 = string(gengo_list[i].gengou);

			int iStartGengoYear = gengo_list[i].start_YMD / 10000; // 開始年を得る。
			result.年 = (年-iStartGengoYear)+1; // 和暦内での年を入れる。元年は０ということ

			// 元年は特別な言い方
			if ( result.年 == 1 ) {
				result.年漢字 = "元"; // 開始年は特別に「元年」という言い方をする。
				return result;

			// それ以外は計算
			} else {
				char szSrcBuf[32] = ""; // 全角漢字用バッファ
				// 元年以外は１つずつ変換が必要。
				_itoa( result.年, szSrcBuf, 10); // 一端ここに数値→文字にしたものをコピー
				char szDstBuf[32] = ""; // 全角漢字用バッファ
				arabia2kanji( szSrcBuf, szDstBuf ); // 半角数字→全角漢字
				result.年漢字 = string(szDstBuf); // 半角数字に上書き

				return result;
			}
		}
	}

	// ここまで来たら判定できなかったもの。初期値的なものを返す
	result.元号 = "";
	result.年漢字 = "";
	result.年 = 0;

	return result;
}

}