#pragma once

/// <summary>
/// セーブデータの「ロード」と「セーブ」の同じタイミングで、別途ファイルを読み書きするためのサポートクラス。
/// </summary>
template <typename T構造体> class 拡張セーブデータ情報型 {

public:

	/// <summary>
	/// <para>拡張セーブデータの実体。</para>
	/// <para>この変数を短い名前の参照変数で利用することを想定している。</para>
	/// </summary>
	T構造体 拡張パラメタ;

	拡張セーブデータ情報型() {
		static_assert(std::is_pod<T構造体>::value, "EXTENSION Save Data STRUCT is NOT TRIVIAL"); // ○
		Do_メモリクリア();
	}


private:
	struct オールセーブデータEX {
		T構造体 スロット拡張セーブデータ[8];
	};

	オールセーブデータEX 全拡張セーブデータ;


private:
	string Get_拡張セーブデータ名(string セーブファイル名) {
		string 拡張セーブファイル名 = セーブファイル名;
		拡張セーブファイル名 += "EX";
		return 拡張セーブファイル名;
	}

	void Load_拡張セーブデータ(string セーブファイル名) {
		string ファイル名 = Get_拡張セーブデータ名(セーブファイル名);

		FILE *fp = fopen(ファイル名.c_str(), "rb");
		if (fp) {
			// せいぜい全データ合わせて数メガ程度までだろうから、１撃でファイル→構造体の配列へとシリアルコピプ
			int len = fread(&全拡張セーブデータ, sizeof(オールセーブデータEX), 1, fp); // 本当はエラー処理がいる。
			fclose(fp);
		}
	}

	void Save_拡張セーブデータ(string セーブファイル名) {
		string ファイル名 = Get_拡張セーブデータ名(セーブファイル名);

		FILE *fp = fopen(ファイル名.c_str(), "wb");
		if (fp) {
			// せいぜい全データ合わせて数メガ程度までだろうから、１撃で構造体の配列→ファイルへとシリアルコピプ
			int len = fwrite(&全拡張セーブデータ, sizeof(オールセーブデータEX), 1, fp); // 本当はエラー処理がいる。
			fclose(fp);
		}
	}

public:
	/// <summary>
	/// 「カスタム::On_セーブデータ読込時」内で、このメソッドも呼び出すようにするのが一般的な使い方。
	/// </summary>
	void On_セーブデータ読込時(int スロット番号, string セーブファイル名) {
		// 全てのスロットのデータを読み込んでしまう。
		Load_拡張セーブデータ(セーブファイル名);

		int IX = スロット番号 - 1;
		// ロードした全データのうち、「対応するスロットの拡張部分データ」を、「編集用データ領域」にコピー
		memcpy(&拡張パラメタ, &全拡張セーブデータ.スロット拡張セーブデータ[IX], sizeof(拡張パラメタ));
	}

	/// <summary>
	/// 「カスタム::On_セーブデータ保存時」内で、このメソッドも呼び出すようにするのが一般的な使い方。
	/// </summary>
	void On_セーブデータ保存時(int スロット番号, string セーブファイル名) {
		// 全てのスロットのデータを読み込んでしまう。
		Load_拡張セーブデータ(セーブファイル名);

		int IX = スロット番号 - 1;
		// 全拡張セーブデータの「対応するスロット部分」に、「編集用データ領域の情報」をまるまるコピー
		memcpy(&全拡張セーブデータ.スロット拡張セーブデータ[IX], &拡張パラメタ, sizeof(拡張パラメタ));

		Save_拡張セーブデータ(セーブファイル名);
	}

	/// <summary>
	/// メモリ上の拡張セーブデータをクリアする。
	/// </summary>
	void Do_メモリクリア() {
		ZeroMemory(&全拡張セーブデータ, sizeof(全拡張セーブデータ));
		ZeroMemory(&拡張パラメタ, sizeof(拡張パラメタ));
	}
};


