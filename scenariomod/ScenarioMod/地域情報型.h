/*
 * 地域情報型
 */
#pragma once
#pragma pack(1)

#include <windows.h>

#include "地域情報列挙.h"

/*
	地名(25*74)

	[25バイト]

	0-6		地域名 (蝦夷とか武蔵とか播磨とか)
    7-8     地域に所属している城番号、1個目
	9-10    地域に所属している城番号、2個目
	11-12	地域に所属している城番号、3個目
	13-14	地域に所属している城番号、4個目
	15-16	地域に所属している城番号、5個目
	17-18	地域に所属している城番号、6個目
	19-20	地域に所属している城番号、7個目
	21-22	地域に所属している城番号、8個目
	23-24	？
*/
struct 地域情報型
{
    char _地域名[7];				// 城域名。Get_地域名で取得すること。
	WORD 地域内の城１【城番号】;	// 地域に所属している城1
	WORD 地域内の城２【城番号】;	// 地域に所属している城2
	WORD 地域内の城３【城番号】;	// 地域に所属している城3
	WORD 地域内の城４【城番号】;	// 地域に所属している城4
	WORD 地域内の城５【城番号】;	// 地域に所属している城5
	WORD 地域内の城６【城番号】;	// 地域に所属している城6
	WORD 地域内の城７【城番号】;	// 地域に所属している城7
	WORD 地域内の城８【城番号】;	// 地域に所属している城8
	WORD _未定義1;						// ?
};

namespace 関数 {

	/// <summary>
	/// 対象の地域に対応する地域名を取得する
	/// <para>返り値：地域名の文字列 (蝦夷とか武蔵とか播磨とか)。最大全角で３文字。</para>
	/// </summary>
	/// <param name="地域番号【配列用】">対象の地域の「配列用」の番号</param>
	/// <returns>地域名の文字列 (蝦夷とか武蔵とか播磨とか)。全角で最大３文字。</returns>
	string Get_地域名( int 地域番号【配列用】);


	/// <summary>
	/// 対象の城が帰属する地域を取得する。
	/// <para>返り値：地域の「配列用」の番号</para>
	/// </summary>
	/// <param name="城番号【配列用】">対象の城の「配列用」の番号</param>
	/// <returns>地域の「配列用」の番号</returns>
	int Get_地域番号【配列用】( int 城番号【配列用】);

}




namespace 関数 {

	/// <summary>
	/// 対象の城に対応する「現代の都道府県」を得る。
	/// <para>返り値：都道府県番号</para>
	/// <para>都道府県::北海道〜都道府県::沖縄県</para>
	/// <para>不正な引数の場合、0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="城番号【配列用】">対象の城の「配列用」の番号</param>
	/// <returns>都道府県番号(都道府県::北海道〜都道府県::沖縄県)。不正な引数の場合、0xFFFFが返ってくる。</returns>
	int Get_城都道府県番号(int 城番号【配列用】);


	/// <summary>
	/// 対象の「都道府県番号」に対応する「都道府県名」を文字列で得る。
	/// <para>返り値：都道府県名の文字列</para>
	/// <para>不正な引数の場合、""が返ってくる。</para>
	/// </summary>
	/// <param name="都道府県番号">都道府県番号(都道府県::北海道〜都道府県::沖縄県)。</param>
	/// <returns>都道府県名の文字列。不正な引数の場合、""が返ってくる。</returns>
	string Get_都道府県名(int 都道府県番号);
}