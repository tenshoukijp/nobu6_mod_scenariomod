#include "ゲームデータ構造.h"

#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>
#include <time.h>




namespace 関数 {

/*
【口調】:
0 無口			 217 真田幸村・長宗我部元親・島津義久・忍者全員 
1 礼儀正しい	 152 前田利家・明智光秀・立花宗茂・徳川光圀 
2 粗暴			 119 柴田勝家・龍造寺隆信・可児才蔵・佐々木小次郎 
3 高貴			 30 上杉憲政・今川義元・足利義晴・一条兼定 
4 生意気		 180 伊達政宗・三好長慶・鈴木重秀・由比正雪 
5 威厳			 143 織田信長・徳川家康・武田信玄・上杉謙信 
6 饒舌			 145 豊臣秀吉・斎藤道三・松永久秀・足利義昭 
7 一般			 314 本多忠勝・吉川元春・山中鹿之助・史実姫全員 
*/


string ％（自名）％		(int 自分武将番号【配列用】, int 相手武将番号【配列用】	, int 第三者武将番号【配列用】 = 0xFFFF);


// 00（相手に敬意を払う必要がない場合の自称） 
string ％わし％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	
	// 家族の場合を先に判定する。
	string szIsFamilyMsg = ％（自名）％( 自分武将番号【配列用】, 相手武将番号【配列用】, 第三者武将番号【配列用】 );

	if ( szIsFamilyMsg.length() > 0 ) {
		return szIsFamilyMsg;
	}

	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// わらわ 自女&自齢>35 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 && Get_武将年齢(自分武将番号【配列用】) > 35 ) {
			return "わらわ";

		// わたくし 自女  
		} else if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "わたくし";

		// まろ 自口=3 
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 ) {
			return "まろ";

		// わし 自身=0or1 and 自齢>35  (0==隠居, 1==大名)
		} else if ( (p武将戸籍情報[自分武将番号【配列用】].身分 == 身分::隠居 || p武将戸籍情報[自分武将番号【配列用】].身分 == 身分::大名) && Get_武将年齢(自分武将番号【配列用】) > 35 ) {
			return "わし";

		// 俺 自口=2or4
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 4 ) {
			return "俺";

		// 私 自口=1 
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 ) {
			return "私";

		// わし （他） 
		} else {
			return "わし";

		}
	}
	return "％わし％";
}



// 01（相手と親子・兄弟・夫婦にある場合の自称）
// 他のヘルパーなので、直接使わないこと!!
string ％（自名）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {

	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 &&
		 0 <= 相手武将番号【配列用】 && 相手武将番号【配列用】 < 最大数::武将情報::配列数) {

		 // 娘 相自親子&自齢<相齢&自女 
		 if ( Is_自分は相手の娘(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "娘";

		 // 父 自相親子&自齢>相齢&自男 
		 } else if ( Is_自分は相手の父(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "父";

		 // 母 自相親子&自齢>相齢&自女 
		 } else if ( Is_自分は相手の母(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "母";

		 // 弟 自相兄弟&自齢<相齢&自男 
		 } else if ( Is_自分は相手の弟(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "弟";
		 
		 // 妹 自相兄弟&自齢<相齢&自女 
		 } else if ( Is_自分は相手の妹(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "妹";

		 // 兄 自相兄弟&自齢>相齢&自男
		 } else if ( Is_自分は相手の兄(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "兄";

		 // 姉 自相兄弟&自齢>相齢&自女
		 } else if ( Is_自分は相手の姉(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "姉";

		 // 夫 自相夫婦&自男
		 } else if ( Is_自分は相手の夫(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "夫";

		 // 妻 相自婦夫&自女
		 } else if ( Is_自分は相手の妻(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			  return "妻";
		 }

	}
	return "";
}



// 02（その他の場合の自称） 
string ％私％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	
	// 家族の場合を先に判定する。
	string szIsFamilyMsg = ％（自名）％( 自分武将番号【配列用】, 相手武将番号【配列用】, 第三者武将番号【配列用】 );

	if ( szIsFamilyMsg.length() > 0 ) {
		return szIsFamilyMsg;
	}

	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// わたくし 自女  
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "わたくし";

		// まろ 自相血縁&自口=3 
		} else if ( Is_自分は相手の血縁(自分武将番号【配列用】, 相手武将番号【配列用】) && p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 ) {
			return "まろ";

		// わし 自相血縁&自齢>相齢&自齢>35
		} else if ( Is_自分は相手の血縁(自分武将番号【配列用】, 相手武将番号【配列用】) && Get_武将年齢(自分武将番号【配列用】) > Get_武将年齢(相手武将番号【配列用】) && Get_武将年齢(自分武将番号【配列用】) > 35 ) {
			return "わし";

		// わし 自身=(0or1)&自齢>35  (0==隠居, 1==大名)
		} else if ( (p武将戸籍情報[自分武将番号【配列用】].身分 == 身分::隠居 || p武将戸籍情報[自分武将番号【配列用】].身分 == 身分::大名) && Get_武将年齢(自分武将番号【配列用】) > 35 ) {
			return "わし";

		// 拙者 自職=1or3 (忍者か剣豪)
		} else if ( p武将情報[自分武将番号【配列用】].職業 == 職業::忍者 || p武将情報[自分武将番号【配列用】].職業 == 職業::剣豪 ) {
			return "拙者";

		// 拙僧 自職=4 (僧侶)
		} else if ( p武将情報[自分武将番号【配列用】].職業 == 職業::僧侶 ) {
			return "拙僧";

		// 俺 自口=2
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 ) {
			return "俺";

		// それがし 自口=5
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 ) {
			return "それがし";

		// 私 （他） 
		} else  {
			return "私";

		}
	}
	return "％私％";
}


// 03（所有形容詞）  
string ％我が％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {
		// 私の 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "私の";
		} else {
			return "我が";
		}
	}
	return "％我が％";
}


// 04〜07 相手をさげすむ場合「以外」の二人称
string ％相手％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 &&
		 0 <= 相手武将番号【配列用】 && 相手武将番号【配列用】 < 最大数::武将情報::配列数) {

		/*
		 * 04（相手と血縁関係にある場合の二人称）   
		 */ 
		// 自相親子&自齢<相齢&相男
		if ( Is_相手は自分の父(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "父上";

		// 自相親子&自齢<相齢&相女
		} else if ( Is_相手は自分の母(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "母上";

		// 兄上 自相兄弟&自齢<相齢&相男 
		} else if ( Is_相手は自分の兄(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "兄上";

		// 姉上 自相兄弟&自齢<相齢&相女 
		} else if ( Is_相手は自分の姉(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "姉上";

		// あなた 自相夫婦&相男 
		} else if ( Is_自分は相手の妻(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "あなた";

		// (相名) 自相親子&自齢>相齢 (自分は相手の親である)
		} else if ( Is_自分は相手の親(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前;

		// (相名)殿 自相血縁&相=大名
		} else if ( Is_自分は相手の血縁(自分武将番号【配列用】, 相手武将番号【配列用】) && p武将戸籍情報[相手武将番号【配列用】].状態 == 0) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前 + string("殿");

		// (相名) 自相兄弟&自齢>相齢&相≠大名
		} else if ( Is_自分は相手の兄(自分武将番号【配列用】, 相手武将番号【配列用】) && p武将戸籍情報[相手武将番号【配列用】].状態 != 0) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前;

		// (相名) 自相夫婦&相女 
		} else if ( Is_自分は相手の夫(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前;

		// (相名)殿 自相血縁
		} else if ( Is_自分は相手の血縁(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前 + string("殿");

		/*
		 *	05（自分が大名で相手がその家臣の場合の二人称）
		 */
		// ご隠居 自=大名&相身=0 
		} else if ( Is_相手は自分の家臣(自分武将番号【配列用】, 相手武将番号【配列用】) && p武将戸籍情報[相手武将番号【配列用】].身分 == 身分::隠居 ) {
			return "ご隠居";

		// じい 自齢<相仕&自齢≦30&相齢≧50&相男
		} else if ( Is_相手は自分の家臣(自分武将番号【配列用】, 相手武将番号【配列用】) && 
			        (Get_武将年齢(自分武将番号【配列用】) < p武将情報[相手武将番号【配列用】].仕官年数) && Get_武将年齢(自分武将番号【配列用】) <=30 && 
					Get_武将年齢(相手武将番号【配列用】) >= 50 && p武将戸籍情報[相手武将番号【配列用】].性別==0 ) {
			return "じい";
		// 猿 自=織田信長(=顔0)&相=豊臣秀吉(=顔5) 
		} else if ( Is_相手は自分の家臣(自分武将番号【配列用】, 相手武将番号【配列用】) && p武将戸籍情報[自分武将番号【配列用】].顔番号 == 0 && p武将戸籍情報[相手武将番号【配列用】].顔番号 == 5 ) {
			return "猿";

		// (相名) （他） 
		} else if ( Is_相手は自分の家臣(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前;

		/*
		 *	06（相手が自分の大名の場合の二人称）
		 */
		// 若 相齢<自仕&相齢≦30&自齢≧50&相男 
		} else if ( Is_相手は自分の大名(自分武将番号【配列用】, 相手武将番号【配列用】) && 
					(Get_武将年齢(相手武将番号【配列用】) < p武将情報[自分武将番号【配列用】].仕官年数) && Get_武将年齢(相手武将番号【配列用】) <=30 && 
					Get_武将年齢(自分武将番号【配列用】) >= 50 && p武将戸籍情報[相手武将番号【配列用】].性別==0 ) {
			return "若";

		// お館様 自口≠3&33%
		} else if ( Is_相手は自分の大名(自分武将番号【配列用】, 相手武将番号【配列用】) && p武将情報[自分武将番号【配列用】].口調 != 3 && rand() % 3 == 0 ) {
			return "お館様";

		// (相名)様 （他） 
		} else if ( Is_相手は自分の大名(自分武将番号【配列用】, 相手武将番号【配列用】) ){
			return p武将戸籍情報[相手武将番号【配列用】]._名前 + string("様");

		/*
		 *	07（その他の場合の二人称） 
		 */
		// (相名)殿 相身=1&自身=1 (1==大名)
		} else if ( p武将戸籍情報[相手武将番号【配列用】].身分 == 身分::大名 && p武将戸籍情報[自分武将番号【配列用】].身分 == 身分::大名 ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前 + string("殿");

		// (相名)様 相身=1&自身≠1 
		} else if ( p武将戸籍情報[相手武将番号【配列用】].身分 == 身分::大名 && p武将戸籍情報[自分武将番号【配列用】].身分!=1 ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前 + string("様");

		// ご隠居 相身=0 
		} else if ( p武将戸籍情報[相手武将番号【配列用】].身分 == 身分::隠居 ) {
			return "ご隠居";

		// (相名) 自身≧相身(内部番号的には自身≦相身)&自齢≧相齢&自属=相属  (身分=0:隠居 1:大名 2:宿老 3:家老 …なので、番号が小さい方が強い)
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 <= p武将戸籍情報[相手武将番号【配列用】].身分 && 
					Get_武将年齢(自分武将番号【配列用】) >= Get_武将年齢(相手武将番号【配列用】) && Is_自分と相手は同じ大名家所属(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前;

		// (相姓)様 自身>相身+1(3階級自分が下の身分ということ)&自口≠4 
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 > p武将戸籍情報[相手武将番号【配列用】].身分+1 && 
			p武将情報[自分武将番号【配列用】].口調 != 4 ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名字 + string("様");

		// (相名)様 相女 
		} else if ( p武将戸籍情報[相手武将番号【配列用】].性別 == 性別::女 ) {
			return p武将戸籍情報[相手武将番号【配列用】]._名前 + string("様");

		// (相名)殿 （他） 
		} else {
			return p武将戸籍情報[相手武将番号【配列用】]._名前 + string("殿");
		}

	}
	return "％相手％";
}


// 08 相手をさげすむ場合の二人称
string ％罵倒相手％		(int 自分武将番号【配列用】, int 相手武将番号【配列用】 , int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 &&
		 0 <= 相手武将番号【配列用】 && 相手武将番号【配列用】 < 最大数::武将情報::配列数) {
		// 小わっぱ 相男&相齢<18&自齢-相齢>5 
		if ( p武将戸籍情報[相手武将番号【配列用】].性別 == 性別::男 && Get_武将年齢(相手武将番号【配列用】) < 18 && Get_武将年齢(自分武将番号【配列用】)-Get_武将年齢(相手武将番号【配列用】) > 5 ) {
			return "小わっぱ";

		// 小娘 相女&相齢<18&自齢-相齢>5 
		} else if ( p武将戸籍情報[相手武将番号【配列用】].性別 == 性別::女 && Get_武将年齢(相手武将番号【配列用】) < 18 && Get_武将年齢(自分武将番号【配列用】)-Get_武将年齢(相手武将番号【配列用】) > 5 ) {
			return "小娘";

		// 青二才 相齢<30&自齢-相齢>20 
		} else if ( Get_武将年齢(相手武将番号【配列用】) < 30 && Get_武将年齢(自分武将番号【配列用】)-Get_武将年齢(相手武将番号【配列用】) > 20 ) {
			return "青二才";

		// 老いぼれ 相齢>60&相齢-自齢>20 
		} else if ( Get_武将年齢(相手武将番号【配列用】) > 60 && Get_武将年齢(相手武将番号【配列用】)-Get_武将年齢(自分武将番号【配列用】) > 20 ) {
			return "老いぼれ";

		// くそ坊主
		} else if ( p武将情報[相手武将番号【配列用】].職業 == 職業::僧侶 ) {
			return "くそ坊主";

		// えせ茶人
		} else if ( p武将情報[相手武将番号【配列用】].職業 == 職業::茶人 ) {
			return "えせ茶人";

		// 伴天連
		} else if ( p武将情報[相手武将番号【配列用】].職業 != 0x90 && p武将情報[相手武将番号【配列用】].職業 == 0x90 ) {
			return "伴天連";

		} else {
			return p武将戸籍情報[相手武将番号【配列用】]._名前;
		}
	}
	return "％罵倒相手％";
}


// 09〜0D 三名をさげすむ場合「以外」の三人称
string ％三名％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 &&
		 0 <= 第三者武将番号【配列用】 && 第三者武将番号【配列用】 < 最大数::武将情報::配列数) {

		/*
		 * 0A09（大名が血縁関係にある武将を指す場合の三人称） 
		 */ 
		// 父上 自三親子&自齢<三齢&三男 (1==大名)
		if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && Is_相手は自分の父(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "父上";

		// 母上 自三親子&自齢<三齢&三女
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && Is_相手は自分の母(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "母上";

		// 兄上 自三兄弟&自齢<三齢&三男
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && Is_相手は自分の兄(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "兄上";

		// 姉上 自三兄弟&自齢<三齢&三女
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && Is_相手は自分の姉(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "姉上";

		// 姉上 自三兄弟&自齢<三齢&三女
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && Is_自分は相手の血縁(自分武将番号【配列用】, 第三者武将番号【配列用】) && p武将戸籍情報[第三者武将番号【配列用】].性別 == 性別::女 ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前;

		// (三名殿) 血縁関係
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && Is_自分は相手の血縁(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前 + string("殿");

		// ご隠居 三身=0 
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && p武将戸籍情報[第三者武将番号【配列用】].身分 == 身分::隠居 ) {
			return "ご隠居";

		/*
		 * 0A（血縁・夫婦関係にある大名を指す場合の三人称） 
		 */ 
		// 父 自三親子&自齢<三齢&三男
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_相手は自分の父(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "父";

		// 母 自三親子&自齢<三齢&三女
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_相手は自分の母(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "母";

		// 兄 自三兄弟&自齢<三齢&三男
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_相手は自分の兄(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "兄";

		// 姉 自三兄弟&自齢<三齢&三女
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_相手は自分の姉(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "姉";

		// 弟 自三兄弟&自齢>三齢&三男
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_相手は自分の弟(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "弟";

		// 妹 自三兄弟&自齢>三齢&三女
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_相手は自分の妹(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "妹";

		// 家内 自三夫婦&相女
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_自分は相手の夫(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "家内";

		// 夫 自三夫婦&相男
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_自分は相手の妻(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "夫";

		// (三名) 自三血縁&自齢>相齢&三女 
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_自分は相手の血縁(自分武将番号【配列用】, 第三者武将番号【配列用】) && Get_武将年齢( 自分武将番号【配列用】 ) > Get_武将年齢( 第三者武将番号【配列用】 ) && p武将戸籍情報[第三者武将番号【配列用】].性別 == 性別::女 ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前;

		// (三名殿) 血縁関係
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Is_自分は相手の血縁(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前 + string("殿");

		/*
		 * 0B（自分が大名であり、血縁関係ではない場合の三人称） 
		 */ 
		// じい 自齢<三仕&自齢≦30&三齢≧50&？&三男 
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && 
			        (Get_武将年齢(自分武将番号【配列用】) < p武将情報[第三者武将番号【配列用】].仕官年数) && Get_武将年齢(自分武将番号【配列用】) <=30 && 
					Get_武将年齢(第三者武将番号【配列用】) >= 50 && p武将戸籍情報[第三者武将番号【配列用】].性別==0 ) {
			return "じい";

		// (三名) 自三血縁&自齢>相齢&三女 
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 == 1 && p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 && Get_武将年齢( 自分武将番号【配列用】 ) > Get_武将年齢( 第三者武将番号【配列用】 ) && p武将戸籍情報[第三者武将番号【配列用】].性別 == 性別::女 ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前;

		// (三名殿) 血縁関係
		} else if (p武将戸籍情報[自分武将番号【配列用】].身分 == 1 &&  p武将戸籍情報[第三者武将番号【配列用】].身分 == 1 ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前 + string("殿");

		/*
		 *	0C（相手が自分の大名の場合の三人称）
		 */
		// 若 相齢<自仕&相齢≦30&自齢≧50&相男 
		} else if ( Is_相手は自分の大名(自分武将番号【配列用】, 第三者武将番号【配列用】) && 
					(Get_武将年齢(第三者武将番号【配列用】) < p武将情報[自分武将番号【配列用】].仕官年数) && Get_武将年齢(第三者武将番号【配列用】) <=30 && 
					Get_武将年齢(自分武将番号【配列用】) >= 50 && p武将戸籍情報[第三者武将番号【配列用】].性別==0 ) {
			return "若";

		// お館様 33%
		} else if ( Is_相手は自分の大名(自分武将番号【配列用】, 第三者武将番号【配列用】) && rand() % 3 == 0 ) {
			return "お館様";

		// (相名)様 （他） 
		} else if ( Is_相手は自分の大名(自分武将番号【配列用】, 第三者武将番号【配列用】) ){
			return p武将戸籍情報[第三者武将番号【配列用】]._名前 + string("様");
		
		/*
		 * 0D（その他の場合の三人称） 
		 */ 
		// 父 自三親子&自齢<三齢&三男
		} else if ( Is_相手は自分の父(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "父";

		// 母 自三親子&自齢<三齢&三女
		} else if ( Is_相手は自分の母(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "母";

		// 兄 自三兄弟&自齢<三齢&三男
		} else if ( Is_相手は自分の兄(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "兄";

		// 姉 自三兄弟&自齢<三齢&三女
		} else if ( Is_相手は自分の姉(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "姉";

		// 弟 自三兄弟&自齢>三齢&三男
		} else if ( Is_相手は自分の弟(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "弟";

		// 妹 自三兄弟&自齢>三齢&三女
		} else if ( Is_相手は自分の妹(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "妹";

		// 家内 自三夫婦&相女
		} else if ( Is_自分は相手の夫(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "家内";

		// 夫 自三夫婦&相男
		} else if ( Is_自分は相手の妻(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return "夫";

		// (三名) 自三血縁&自齢>相齢&三女 
		} else if ( Is_自分は相手の血縁(自分武将番号【配列用】, 第三者武将番号【配列用】) && Get_武将年齢( 自分武将番号【配列用】 ) > Get_武将年齢( 第三者武将番号【配列用】 ) && p武将戸籍情報[第三者武将番号【配列用】].性別 == 性別::女 ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前;

		// (三名殿) 血縁関係
		} else if ( Is_自分は相手の血縁(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前 + string("殿");

		// (三名) 自身≧三身(内部番号的には自身≦三身)&自齢≧三齢&自属=三属  (身分=0:隠居 1:大名 2:宿老 3:家老 …なので、番号が小さい方が強い)
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 <= p武将戸籍情報[第三者武将番号【配列用】].身分 && 
					Get_武将年齢(第三者武将番号【配列用】) >= Get_武将年齢(第三者武将番号【配列用】) && Is_自分と相手は同じ大名家所属(自分武将番号【配列用】, 第三者武将番号【配列用】) ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前;

		// (三姓)様 自身>三身+1(3階級自分が下の身分ということ)&自口≠4 
		} else if ( p武将戸籍情報[自分武将番号【配列用】].身分 > p武将戸籍情報[第三者武将番号【配列用】].身分+1 && 
			p武将情報[自分武将番号【配列用】].口調 != 4 ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名字 + string("様");

		// (三名)様 三女 
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].性別 == 性別::女 ) {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前 + string("様");

		// (相名)殿 （他） 
		} else {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前 + string("殿");
		}

	}
	return "％三名％";
}




// 0E（第三者をさげすむ場合の三人称） 
string ％罵倒三名％		(int 自分武将番号【配列用】, int 相手武将番号【配列用】 , int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 &&
		 0 <= 第三者武将番号【配列用】 && 第三者武将番号【配列用】 < 最大数::武将情報::配列数) {
		// 小わっぱ 三男&三齢<18&自齢-三齢>5 
		if ( p武将戸籍情報[第三者武将番号【配列用】].性別 == 性別::男 && Get_武将年齢(第三者武将番号【配列用】) < 18 && Get_武将年齢(自分武将番号【配列用】)-Get_武将年齢(第三者武将番号【配列用】) > 5 ) {
			return "小わっぱ";

		// 小娘 三女&三齢<18&自齢-三齢>5 
		} else if ( p武将戸籍情報[第三者武将番号【配列用】].性別 == 性別::女 && Get_武将年齢(第三者武将番号【配列用】) < 18 && Get_武将年齢(自分武将番号【配列用】)-Get_武将年齢(第三者武将番号【配列用】) > 5 ) {
			return "小娘";

		// 青二才 三齢<30&自齢-三齢>20 
		} else if ( Get_武将年齢(第三者武将番号【配列用】) < 30 && Get_武将年齢(自分武将番号【配列用】)-Get_武将年齢(第三者武将番号【配列用】) > 20 ) {
			return "青二才";

		// 老いぼれ 三齢>60&三齢-自齢>20 
		} else if ( Get_武将年齢(第三者武将番号【配列用】) > 60 && Get_武将年齢(第三者武将番号【配列用】)-Get_武将年齢(自分武将番号【配列用】) > 20 ) {
			return "老いぼれ";

		// (三名) （他） 
		} else {
			return p武将戸籍情報[第三者武将番号【配列用】]._名前;
		}
	}
	return "％罵倒三名％";
}


























BOOL ％略記条件１％(int 自分武将番号【配列用】, int 相手武将番号【配列用】) {

	// 自分が下、ということ。
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 &&
		0 <= 相手武将番号【配列用】 && 相手武将番号【配列用】 < 最大数::武将情報::配列数) {

			// 自身>相身 (自分の身分の方が下ということ)
			if ( p武将戸籍情報[自分武将番号【配列用】].身分 > p武将戸籍情報[相手武将番号【配列用】].身分 ){
				return true;
			}
	}
	return false;
}

BOOL ％略記条件２％(int 自分武将番号【配列用】, int 相手武将番号【配列用】) {

	// 血縁関係や、同じ釜の飯だが、自分が上、ということ。
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 &&
		0 <= 相手武将番号【配列用】 && 相手武将番号【配列用】 < 最大数::武将情報::配列数) {

			// 自相血縁&自齢≧相齢 
			if ( Is_自分は相手の血縁( 自分武将番号【配列用】, 相手武将番号【配列用】 ) && Get_武将年齢(自分武将番号【配列用】) >= Get_武将年齢(相手武将番号【配列用】) ) {
				return true;
			}
			// 相手は自分の家臣
			if ( Is_相手は自分の家臣( 自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
				return true;
			}
			// 同じ家に所属している & 自齢≧相齢 & 自身<相身(自分の方が身分が高い)
			if ( Is_自分と相手は同じ大名家所属( 自分武将番号【配列用】, 相手武将番号【配列用】 ) &&  Get_武将年齢(自分武将番号【配列用】) >= Get_武将年齢(相手武将番号【配列用】) && 
				p武将戸籍情報[自分武将番号【配列用】].身分 < p武将戸籍情報[相手武将番号【配列用】].身分 ) {
					return true;
			}
	}
	return false;
}

int ％略記条件Ｔ％(int 自分武将番号【配列用】, int 相手武将番号【配列用】) {
	// 相手の武将がいないのであれば、1となる。
	if ( 相手武将番号【配列用】 == 0xFFFF ) {
		return 1;
	}

	// 略記条件２を満たす。(同じ釜の飯でかつ、自分が上)
	else if ( ％略記条件２％( 自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
		return 1;
	}
	// 略記条件１を満たす。(自分が下)
	else if ( ％略記条件１％( 自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
		return 2;
	}
	// 略記条件１も略記条件２も満たさない(自分の方が身分は上)
	else {
		// それ以外
		return 3;
	}
}



// 〜です 〜だ 〜じゃ
string ％です％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {

	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// です 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "です";

				// だ 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "だ";

				// じゃ （他） 
			} else {
				return "じゃ";
			}

			// Group B
		} else {
			// です （他） 
			return "です";
		}
	}

	return "％です％";
}



// 〜ですか 〜でござるか 〜か
string ％ですか％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {

	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ですか 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ですか";

			// か （他） 
			} else {
				return "か";
			}

		// Group B
		} else {
			// ですか 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ですか";

			// でござるか 自口=5 || 自職=1or3(忍者or剣豪)
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将情報[自分武将番号【配列用】].職業 == 職業::忍者 || p武将情報[自分武将番号【配列用】].職業 == 職業::剣豪 ) {
				return "でござるか";

			// ですか （他） 
			} else {
				return "ですか";
			}
		}
	}

	return "％ですか％";
}



// でしょう 〜じゃろう 〜であろう 〜だろう
string ％でしょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {

	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// でしょう 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "でしょう";

			// であろう 自口=3 || 自口=1 || 自口=5
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 ) {
				return "であろう";

			// だろう 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "だろう";

			// じゃろう (他)
			} else {
				return "じゃろう";
			}

		// Group B
		} else {
			// でしょう
			return "でしょう";
		}
	}

	return "％でしょう％";
}



// 〜でした 〜じゃった 〜であった 〜だった
string ％でした％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// でした 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "でした";

			// であった 自口=3 || 自口=1 || 自口=5
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 ) {
				return "であった";

			// だった 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "だった";

			// じゃった (他)
			} else {
				return "じゃった";
			}

		// Group B
		} else {
			// でした
			return "でした";
		}
	}

	return "％でした％";
}



// 〜あります 〜ございます 〜ござる 〜ある 〜おじゃる
string ％あります％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// あります 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "あります";

			// おじゃる 自口=3
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 ) {
				return "おじゃる";

			// ある (他)
			} else {
				return "ある";
			}

		// Group B
		} else {
			// あります 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "あります";

			// ござる 自口=5 || 自職=1or3(忍者or剣豪)
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将情報[自分武将番号【配列用】].職業 == 職業::忍者 || p武将情報[自分武将番号【配列用】].職業 == 職業::剣豪 ) {
				return "ござる";

			// あります 自相=同じ大名家所属 
			} else if ( Is_自分と相手は同じ大名家所属(自分武将番号【配列用】,相手武将番号【配列用】) ) {
				return "あります";

			// ございます （他） 
			} else {
				return "ございます";

			}
		}
	}

	return "％あります％";
}


// 〜ありません 〜ございません 〜ござらぬ 〜ない 〜おじゃらぬ 〜ありませぬ
string ％ありません％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ありませぬ 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ありませぬ";

			// おじゃらぬ 自口=3
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 ) {
				return "おじゃらぬ";

			// ない (他)
			} else {
				return "ない";
			}

		// Group B
		} else {
			// ありませぬ 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ありませぬ";

			// ござらぬ 自口=5 || 自職=1or3(忍者or剣豪)
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将情報[自分武将番号【配列用】].職業 == 職業::忍者 || p武将情報[自分武将番号【配列用】].職業 == 職業::剣豪 ) {
				return "ござらぬ";

			// ありません 自相=同じ大名家所属 
			} else if ( Is_自分と相手は同じ大名家所属(自分武将番号【配列用】,相手武将番号【配列用】) ) {
				return "あります";

			// ございません （他） 
			} else {
				return "ございます";

			}
		}
	}

	return "％ありません％";
}




// 〜します 〜いたす 〜する
string ％します％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// します 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "します";

			// する 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "する";

			// いたす (他)
			} else {
				return "いたす";
			}

		// Group B
		} else {
			// いたす 自口=5 || 自男
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::男 ) {
				return "いたす";

			// します (他)
			} else {
				return "します";
			}
		}
	}

	return "％します％";
}

// 〜しません 〜いたさぬ 〜せぬ 〜せん 〜しませぬ
string ％しません％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// しませぬ 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "しませぬ";

			// せん 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "せん";

			// せぬ (他)
			} else {
				return "せぬ";
			}

		// Group B
		} else {
			// しませぬ 自口=1 || 自口=3 || 自女
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "しませぬ";

			// いたさぬ 自口=5
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 ) {
				return "いたさぬ";

			// しません (他)
			} else {
				return "しません";
			}
		}
	}

	return "％しません％";
}



// 〜しましょう 〜いたそう 〜しよう
string ％しましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// しましょう 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "しましょう";

			// しよう 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "しよう";

			// いたそう (他)
			} else {
				return "いたそう";
			}

		// Group B
		} else {
			// いたそう 自口=5 || 自男
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::男 ) {
				return "いたそう";

			// しましょう (他)
			} else {
				return "しましょう";
			}
		}
	}

	return "％しましょう％";
}



// 〜いましょう 〜おう  (言いましょうなど)
string ％いましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// いましょう 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "いましょう";

			// おう (他)
			} else {
				return "おう";
			}

		// Group B
		} else {
			// いましょう (他)
			return "いましょう";
		}
	}

	return "％いましょう％";
}



// 〜きましょう 〜こう  (行きましょうなど)
string ％きましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// きましょう 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "きましょう";

				// こう (他)
			} else {
				return "こう";
			}

			// Group B
		} else {
			// きましょう (他)
			return "きましょう";
		}
	}

	return "％きましょう％";
}


// 〜しましょう 〜そう  (？… ％しましょう％の方が良いか)
string ％しましょう２％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// そう (他)
			return "そう";

			// Group B
		} else {
			// しましょう (他)
			return "しましょう";
		}
	}

	return "％しましょう２％";
}



// 〜ちましょう 〜とう  (待ちましょうなど)
string ％ちましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// とう (他)
			return "とう";

			// Group B
		} else {
			// ちましょう (他)
			return "ちましょう";
		}
	}

	return "％ちましょう％";
}


// 29 〜みましょう 〜もう  (攻め込みましょうなど)
string ％みましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// もう (他)
			return "もう";

			// Group B
		} else {
			// みましょう (他)
			return "みましょう";
		}
	}

	return "％ちましょう％";
}


// 〜ましょう 〜よう  (その他の一般パターン。立てましょうなど)
string ％ましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ましょう 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ましょう";

				// よう (他)
			} else {
				return "よう";
			}

			// Group B
		} else {
			// ましょう (他)
			return "ましょう";
		}
	}

	return "％ましょう％";
}



// 〜りましょう 〜ろう  (参りましょうなど)
string ％りましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// りましょう 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "りましょう";

				// ろう (他)
			} else {
				return "ろう";
			}

			// Group B
		} else {
			// りましょう (他)
			return "りましょう";
		}
	}

	return "％りましょう％";
}


// 〜ぎましょう 〜ごう  (急ぎましょうなど)
string ％ぎましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ごう (他)
			return "ごう";

		// Group B
		} else {
			// ぎましょう (他)
			return "ぎましょう";
		}
	}

	return "％ぎましょう％";
}


// 〜びましょう 〜ぼう　(遊びましょうなど)
string ％びましょう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ぼう (他)
			return "ぼう";

		// Group B
		} else {
			// びましょう (他)
			return "びましょう";
		}
	}

	return "％びましょう％";
}



// 35 〜います 〜ござる 〜おる 〜いる 〜おじゃる 〜おります
string ％います％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// おります 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "おります";

			// おじゃらぬ 自口=3
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 ) {
				return "おじゃる";

			// いる 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "いる";

			// おる (他)
			} else {
				return "おる";
			}

		// Group B
		} else {
			// おります 自口=1 or 自口=3 or 自女 
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "おります";

			// ござる 自口=5 || 自職=1or3(忍者or剣豪)
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将情報[自分武将番号【配列用】].職業 == 職業::忍者 || p武将情報[自分武将番号【配列用】].職業 == 職業::剣豪 ) {
				return "ござる";

			// います (他） 
			} else {
				return "います";

			}
		}
	}

	return "％います％";
}



// 37 〜いません 〜ござらぬ 〜おらぬ 〜おらん 〜おじゃらぬ 〜おりませぬ
string ％いません％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// おりませぬ 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "おりませぬ";

			// おじゃらぬ 自口=3
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 ) {
				return "おじゃらぬ";

			// おらん 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "おらん";

			// おらぬ (他)
			} else {
				return "おらぬ";
			}

		// Group B
		} else {
			// おりませぬ 自口=1 or 自口=3 or 自女 
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "おりませぬ";

			// ござらぬ 自口=5 || 自職=1or3(忍者or剣豪)
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将情報[自分武将番号【配列用】].職業 == 職業::忍者 || p武将情報[自分武将番号【配列用】].職業 == 職業::剣豪 ) {
				return "ござらぬ";

			// いません (他） 
			} else {
				return "いません";

			}
		}
	}

	return "％いません％";
}



// 39 〜いました 〜ござった 〜おった 〜いた 〜おじゃった 〜おりました
string ％いました％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// おりました 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "おりました";

			// おじゃった 自口=3
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 ) {
				return "おじゃった";

			// いた 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "いた";

			// おった (他)
			} else {
				return "おった";
			}

		// Group B
		} else {
			// おりました 自口=1 or 自口=3 or 自女 
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "おりました";

			// ござった 自口=5 || 自職=1or3(忍者or剣豪)
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将情報[自分武将番号【配列用】].職業 == 職業::忍者 || p武将情報[自分武将番号【配列用】].職業 == 職業::剣豪 ) {
				return "ござった";

			// いました (他） 
			} else {
				return "いました";

			}
		}
	}

	return "％いました％";
}



// 〜ます 〜る 〜ります
string ％ます％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ます 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ます";

			// る (他)
			} else {
				return "る";
			}

		// Group B
		} else {

			// ます 自相=同じ大名家所属 
			if ( Is_自分と相手は同じ大名家所属(自分武将番号【配列用】,相手武将番号【配列用】) ) {
				return "ます";

			// ります（他） 
			} else {
				return "ります";

			}
		}
	}

	return "％ます％";
}



// 〜りません 〜らぬ
string ％りません％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// りません 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "りません";

			// らぬ (他)
			} else {
				return "らぬ";
			}

		// Group B
		} else {

			// りません（他） 
			return "りません";
		}
	}

	return "％りません％";
}


// 〜ません 〜ぬ 〜ねえ 〜ませぬ
string ％ません％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ませぬ 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ませぬ";

			// ねえ 自口=2 && 自身<=3
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 && p武将戸籍情報[相手武将番号【配列用】].身分 <= 3 ) {
				return "ねえ";

			// ぬ (他)
			} else {
				return "ぬ";
			}

		// Group B
		} else {
			// ませぬ 自口=1 || 自口=5
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 ) {
				return "ませぬ";

			// ません (他） 
			} else {
				return "ません";

			}
		}
	}

	return "％ません％";
}



// 〜ました 〜た
string ％ました％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ました 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ました";

			// た (他)
			} else {
				return "た";
			}

		// Group B
		} else {

			// ました (他） 
			return "ました";

		}
	}

	return "％ました％";
}



// 〜りました 〜った
string ％りました％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// りました 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "りました";

			// った (他)
			} else {
				return "った";
			}

		// Group B
		} else {

			// りました (他） 
			return "りました";

		}
	}

	return "％りました％";
}



// 〜ませんでした 〜なかった
string ％ませんでした％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ませんでした 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ませんでした";

			// なかった (他)
			} else {
				return "なかった";
			}

		// Group B
		} else {

			// ませんでした (他） 
			return "ませんでした";

		}
	}

	return "％ませんでした％";
}



// 〜思います 〜存じます 〜思う
string ％思います％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// 思います 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "思います";

			// 思う (他)
			} else {
				return "思う";
			}

		// Group B
		} else {

			// 存じます 自口=1 or 自口=3 or 自女
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "存じます";

			// 思います (他)
			} else {
				return "思います";
			}

		}
	}

	return "％思います％";
}


// 〜参りました 〜参上しました 〜参った
string ％参りました％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// 参りました 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "参りました";

			// 参った (他)
			} else {
				return "参った";
			}

		// Group B
		} else {

			// 参りました 自女
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "参りました";

			// 参上しました 自口=1 or 自口=5
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 ) {
				return "参上しました";

			// 参りました (他)
			} else {
				return "参りました";
			}

		}
	}

	return "％参りました％";
}



// 〜くだされ 〜下さい 〜くれ
string ％くだされ％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// 下さい 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "下さい";

			// くれ (他)
			} else {
				return "くれ";
			}

		// Group B
		} else {

			// 下さい 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "下さい";

			// くだされ (他)
			} else {
				return "くだされ";
			}

		}
	}

	return "％くだされ％";
}



// 〜すみません 〜申し訳ない 〜すまぬ 〜すまん 〜ごめんなさい
string ％すみません％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// ごめんなさい 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "ごめんなさい";

			// すまん 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "すまん";

			// すまぬ (他)
			} else {
				return "すまぬ";
			}

		// Group B
		} else {
			// 申し訳ない 自口=5 or 自男 
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::男 ) {
				return "申し訳ない";

			// すみません (他） 
			} else {
				return "すみません";

			}
		}
	}

	return "％すみません％";
}

// 〜願います 〜お願いいたす 〜願おう 〜願う 〜お願いします
string ％願います％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// 願います 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "願います";

			// 願う 自口=2 || 自口=4
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 || p武将情報[自分武将番号【配列用】].口調 == 口調::生意気 ) {
				return "願う";

			// 願おう (他)
			} else {
				return "願おう";
			}

		// Group B
		} else {
			// お願します 自口=1 or 自口=3 or 自女 
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "お願いします";

			// お願いいたす 自口=5
			} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::威厳 ) {
				return "お願いいたす";

			// 願います (他） 
			} else {
				return "願います";

			}
		}
	}

	return "％願います％";
}



// 〜よい 〜よろしい
string ％よい％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// 略記条件Ｔのどれがあてはまるか？ どれにもあてはまらなかったら略記条件Ｙでどちらかに当てはまる。
		int Group = ％略記条件Ｔ％(自分武将番号【配列用】,相手武将番号【配列用】) ;

		// Group A
		if ( Group == 1 ) {

			// よろしい 自女 
			if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "よろしい";

			// よい (他)
			} else {
				return "よい";
			}

		// Group B
		} else {

			// よろしい 自口=1 or 自口=3 or 自女
			if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
				return "よろしい";

			// よい (他)
			} else {
				return "よい";
			}

		}
	}

	return "％よい％";
}























// 〜か 〜ね
string ％か（１）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// ね 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "ね";

		// か （他） 
		} else {
			return "か";
		}
	}

	return "％か（１）％";
}




// 〜か 〜なの
string ％か（２）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// なの 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "なの";

		// か （他） 
		} else {
			return "か";
		}
	}

	return "％か（２）％";
}





// 〜か 〜わ
string ％か（３）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// わ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "わ";

		// か （他） 
		} else {
			return "か";
		}
	}

	return "％か（３）％";
}



// 〜か 〜かしら
string ％か（４）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// かしら 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "かしら";

		// か （他） 
		} else {
			return "か";
		}
	}

	return "％か（４）％";
}





// 〜ぞ 〜ぜ 〜ぞよ 〜わ
string ％ぞ（１）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// わ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "わ";

		// ぞよ 自口=3  
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴) {
			return "ぞよ";

		// ぜ 自口=2&自身=1
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 && p武将戸籍情報[自分武将番号【配列用】].身分 == 身分::大名 ) {
			return "ぜ";

		// ぞ （他） 
		} else {
			return "ぞ";
		}
	}

	return "％ぞ（１）％";
}




// 〜ぞ 〜ぜ 〜ぞよ 〜わよ
string ％ぞ（２）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// わよ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "わよ";

		// ぞよ 自口=3  
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴) {
			return "ぞよ";

		// ぜ 自口=2&自身=1
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 && p武将戸籍情報[自分武将番号【配列用】].身分 == 身分::大名 ) {
			return "ぜ";

		// ぞ （他） 
		} else {
			return "ぞ";
		}
	}

	return "％ぞ（２）％";
}







// 〜な 〜わ
string ％な（１）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// わ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "わ";

		// な （他） 
		} else {
			return "な";
		}
	}

	return "％な（１）％";
}





// 〜な 〜ね
string ％な（２）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// ね 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "ね";

		// な （他） 
		} else {
			return "な";
		}
	}

	return "％な（２）％";
}




// 〜(無し) 〜わ
string ％わ（１）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// わ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "わ";

		// (無し) （他） 
		} else {
			return "";
		}
	}

	return "％わ（１）％";
}




// 〜わ 〜わい
string ％わ（２）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// わ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "わ";

		// わい 自口=2&自齢≧50 
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 && Get_武将年齢(自分武将番号【配列用】) >= 50 ) {
			return "わい";

		// わ （他） 
		} else {
			return "わ";

		}
	}

	return "％わ（２）";
}






// 〜なあ 〜のお 〜ねえ 
string ％なあ％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// ねえ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "ねえ";

		// のお 自口=2&自齢≧50 
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 && Get_武将年齢(自分武将番号【配列用】) >= 50 ) {
			return "のお";

		// なあ （他） 
		} else {
			return "なあ";

		}
	}

	return "％なあ％";
}






// 〜お 〜(無し)
string ％お（１）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// (無し) 自相血縁&自齢≧相齢 
		if ( Is_自分は相手の血縁( 自分武将番号【配列用】, 相手武将番号【配列用】 ) && Get_武将年齢(自分武将番号【配列用】) >= Get_武将年齢(相手武将番号【配列用】) ) {
			return "";

		// お （他） 
		} else {
			return "お";

		}
	}

	return "％お（１）％";
}




// 〜お 〜(無し)
string ％お（２）％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// (無し) 自相血縁&自齢≧相齢 
		if ( Is_自分は相手の血縁( 自分武将番号【配列用】, 相手武将番号【配列用】 ) && Get_武将年齢(自分武将番号【配列用】) >= Get_武将年齢(相手武将番号【配列用】) ) {
			return "";

		// お 自口=1or3or自女 
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::礼儀 || p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 || p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "お";

		} else {
			return "";
		}
	}

	return "％お（２）％";
}







// ははは ふふふ くくく あはは わはは ふっ うふふ おほほ 
string ％ははは％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// おほほ 自女&自齢≧25 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 && Get_武将年齢(自分武将番号【配列用】) >= 25 ) {
			return "おほほ";

		// うふふ 自女
		} else if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女  ) {
			return "うふふ";

		// わはは 自口=2
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴  ) {
			return "わはは";

		// ふっ 自口=0
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 0  ) {
			return "ふっ";

		// あはは 自齢≦20 
		} else if ( Get_武将年齢(自分武将番号【配列用】) <= 20 ) {
			return "あはは";

		// くくく 戦才B以下&自戦≦50
		} else if ( p武将情報[自分武将番号【配列用】].戦闘適性 <= 戦闘適性::Ｂ && Get_戦闘値(自分武将番号【配列用】) <= 50 ) {
			return "くくく";

		// ふふふ 戦才B以下
		} else if ( p武将情報[自分武将番号【配列用】].戦闘適性 <= 戦闘適性::Ｂ ) {
			return "ふふふ";

		// ははは （他） 
		} else {
			return "ははは";
		}
	}

	return "％ははは％";
}



// 〜い 〜き
string ％い％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// き 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "き";

		// い （他） 
		} else {
			return "い";
		}
	}

	return "％い％";
}




// うむむ まあ 
string ％うむむ％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// まあ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "まあ";

		// うむむ （他） 
		} else {
			return "うむむ";
		}
	}

	return "％うむむ％";
}



// おお まあ
string ％おお％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// まあ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "まあ";

		// おお （他） 
		} else {
			return "おお";
		}
	}

	return "％おお％";
}




// つまらぬ… おもしろくありません 
string ％つまらぬ…％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// おもしろくありません 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "おもしろくありません";

		// つまらぬ… （他） 
		} else {
			return "つまらぬ…";
		}
	}

	return "％つまらぬ…％";
}




// やっ し 
string ％やっ％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// し 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "し";

		// やっ （他） 
		} else {
			return "やっ";
		}
	}

	return "％やっ％";
}




// ち てし
string ％ち％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// てし 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女) {
			return "てし";

		// ち （他） 
		} else {
			return "ち";
		}
	}

	return "％ち％";
}





// れ られよ 
string ％れ％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// られよ 自齢<相齢  
		if ( Get_武将年齢(自分武将番号【配列用】) < Get_武将年齢(相手武将番号【配列用】) ) {
			return "られよ";

		// れ （他） 
		} else {
			return "れ";
		}
	}

	return "％れ％";
}






// しんぜよう くれよう しんぜましょう 
string ％しんぜよう％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// しんぜましょう 自相血縁&自齢<相齢 
		if ( Is_自分は相手の血縁( 自分武将番号【配列用】, 相手武将番号【配列用】 ) && Get_武将年齢(自分武将番号【配列用】) < Get_武将年齢(相手武将番号【配列用】) ) {
			return "しんぜましょう";

		// しんぜましょう 自女  
		} else if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "しんぜましょう";

		// くれよう
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 ) {
			return "くれよう";

		// しんぜよう （他） 
		} else {
			return "しんぜよう";
		}
	}

	return "％しんぜよう％";
}


// 一族 親子 姉妹 姉弟 兄妹 夫婦 兄弟 姉妹 姉弟 兄妹 
string ％一族％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		if ( Is_自分は相手の親(自分武将番号【配列用】, 相手武将番号【配列用】 ) ) {
			return "親子";

		// 兄弟
		} else if ( Is_自分と相手は兄弟(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "兄弟";

		// 姉妹
		} else if ( Is_自分と相手は姉妹(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "姉妹";

		// 姉弟
		} else if ( Is_自分と相手は姉弟(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "姉弟";

		// 兄妹 
		} else if ( Is_自分と相手は兄妹(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "兄妹";

		} else if ( Is_自分は相手の夫(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "夫婦";

		} else if ( Is_自分は相手の妻(自分武将番号【配列用】, 相手武将番号【配列用】) ) {
			return "夫婦";

		} else {
			return "一族";

		}
	}

	return "％一族％";
}




// でござる だぞ、ははは でおじゃるぞえ ですわ 
string ％でござる％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// ですわ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "しんぜましょう";

		// だぞ、ははは 自口=2
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::粗暴 ) {
			return "だぞ、" + ％ははは％(自分武将番号【配列用】, 相手武将番号【配列用】,第三者武将番号【配列用】);

		// でおじゃるぞえ 自口=3 
		} else if ( p武将情報[自分武将番号【配列用】].口調 == 口調::高貴 ) {
			return "でおじゃるぞえ";

		// でござる （他） 
		} else {
			return "でござる";
		}
	}

	return "％でござる％";
}




// すな しますな 
string ％すな％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// しますな 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "しますな";


		// すな （他） 
		} else {
			return "すな";
		}
	}

	return "％すな％";
}





// てみよ なさい
string ％てみよ％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// なさい 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "なさい";

		// てみよ （他） 
		} else {
			return "てみよ";
		}
	}

	return "％てみよ％";
}



// よ ませ
string ％よ％(int 自分武将番号【配列用】, int 相手武将番号【配列用】, int 第三者武将番号【配列用】) {
	if ( 0 <= 自分武将番号【配列用】 && 自分武将番号【配列用】 < 最大数::武将情報::配列数 ) {

		// ませ 自女 
		if ( p武将戸籍情報[自分武将番号【配列用】].性別 == 性別::女 ) {
			return "ませ";

		// よ （他） 
		} else {
			return "よ";
		}
	}

	return "％よ％";
}


}