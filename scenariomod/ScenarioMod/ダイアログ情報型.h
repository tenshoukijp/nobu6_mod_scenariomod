#pragma once

#include <string>
using namespace std;

#include "ダイアログ情報列挙.h"
extern vector<int> _SelectBushouMultiDialog(vector<int> list, __int64 iFilterOption, int iSelectableMaxBushouNum);

// --------------------------------------ダイアログ関連
namespace 関数 {

	/// <summary>
	/// 「実行」「取消」のボタンが付いている、モーダルダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　「実行」ボタンを選択したなら1、 </para>
	/// <para>　「取消」ボタンを選択したなら0、</para>
	/// <para>　右クリックも取消相当なので0が返ってくる。</para>
	/// </summary>
	/// <param name="ダイアログ文字列">ダイアログに表示する文字列</param>
	/// <returns>
	/// <para>返り値：</para>
	/// <para>　「実行」ボタンを選択したなら1、 </para>
	/// <para>　「取消」ボタンを選択したなら0、</para>
	/// <para>　右クリックも取消相当なので0が返ってくる。</para>
	/// </returns >
	int 実行／取消ダイアログ表示(string ダイアログ文字列);
}

namespace 関数 {

	/// <summary>
	/// 複数選択メニューを選ぶリストメニューダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　メニューの１番上を選択したら 0、 </para>
	/// <para>　　　　　　２番目を選択したら 1、</para>
	/// <para>　右クリックを押した場合(いずれも選択しなかった場合)は、0xFFFF、</para>
	/// <para>　といった値が返ってくる。</para>
	/// </summary>
	/// <param name="文字列リスト">各々のメニューに表示する名前を文字列リスト型で渡す。</param>
	/// <param name="Ｘ座標">メニューダイアログを表示する際の左上のＸ座標。指定しなければ、ダイアログの左右は中央になるように値が調整される。</param>
	/// <param name="Ｙ座標">メニューダイアログを表示する際の左上のＹ座標。指定しなければ、ダイアログの上下は中央になるように値が調整される。</param>
	/// <returns>
	/// <para>　メニューの１番上を選択したら 0、 </para>
	/// <para>　　　　　　２番目を選択したら 1、</para>
	/// <para>　右クリックを押した場合(いずれも選択しなかった場合)は、0xFFFF、</para>
	/// <para>　といった値が返ってくる。</para>
	/// </returns >
	int 選択メニューダイアログ表示(文字列リスト型 文字列リスト, int Ｘ座標 = -1, int Ｙ座標 = -1);
}


namespace 関数 {

	/// <summary>
	/// 複数の大名リストから１つ選択するダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　選択した「大名番号【配列用】」が返ってくる。</para>
	/// <para>　何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="大名番号【配列用】リスト">リストに表示する大名の「大名番号【配列用】」を番号リスト型にして、引数として渡す。</param>
	/// <param name="カラムオプション">
	/// 「カラム::大名」以下から複数を組み合わせて、表示カラムを絞ることが出来る。
	/// <para>何も指定しなかった場合は、「カラム::大名::デフォルト」が使われる</para>
	/// <para>例：</para>
	/// <para>　カラム::大名::友好|カラム::大名::金|カラム::大名::米収支</para>
	/// </param>
	/// <param name="主観大名番号【配列用】">主体となる大名番号【配列用】を渡す。省略した場合は、ターンが回ってきている大名の番号となる。 </param>
	/// <returns>
	/// <para>リストから選択した大名の「大名番号【配列用】」が返ってくる。</para>
	/// <para>何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </returns >
	int 選択大名ダイアログ表示(番号リスト型 大名番号【配列用】リスト, int カラムオプション = カラム::大名::デフォルト, int 主観大名番号【配列用】 = -1);
}

namespace 関数 {

	/// <summary>
	/// 複数の軍団リストから１つ選択するダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　選択した「軍団番号【配列用】」が返ってくる。</para>
	/// <para>　何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="軍団番号【配列用】リスト">リストに表示する軍団の「軍団番号【配列用】」を番号リスト型にして、引数として渡す。</param>
	/// <param name="カラムオプション">
	/// 「カラム::軍団」以下から複数を組み合わせて、表示カラムを絞ることが出来る。
	/// <para>何も指定しなかった場合は、「カラム::軍団::デフォルト」が使われる</para>
	/// <para>例：</para>
	/// <para>　カラム::軍団::方針|カラム::軍団::軍事拠点</para>
	/// </param>
	/// <returns>
	/// <para>リストから選択した軍団の「軍団番号【配列用】」が返ってくる。</para>
	/// <para>何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </returns >
	int 選択軍団ダイアログ表示(番号リスト型 軍団番号【配列用】リスト, int カラムオプション = カラム::軍団::デフォルト);
}


namespace 関数 {

	/// <summary>
	/// 複数の武将リストから１つ選択するダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　選択した「武将番号【配列用】」が返ってくる。</para>
	/// <para>　何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="武将番号【配列用】リスト">リストに表示する武将の「武将番号【配列用】」を番号リスト型にして、引数として渡す。</param>
	/// <param name="カラムオプション">
	/// 「カラム::武将」以下から複数を組み合わせて、表示カラムを絞ることが出来る。
	/// <para>何も指定しなかった場合は、「カラム::武将::デフォルト」が使われる</para>
	/// <para>例：</para>
	/// <para>　カラム::武将::身分|カラム::武将::特殊兵科</para>
	/// </param>
	/// <returns>
	/// <para>リストから選択した武将の「武将番号【配列用】」が返ってくる。</para>
	/// <para>何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </returns >
	int 選択武将ダイアログ表示(番号リスト型 武将番号【配列用】リスト, __int64 カラムオプション = カラム::武将::デフォルト);


	template<int 選択可能最大数>
	/// <summary>
	/// 複数の武将リストから複数の武将を選択するダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　選択した複数の武将「武将番号【配列用】」が番号リスト型で返ってくる。</para>
	/// <para>　何も選択しなかった場合、要素数が０の番号リスト型が返ってくる。</para>
	/// <examples>
	/// <para>
	/// <code>
	/// 番号リスト型 rlist = 選択武将ダイアログ表示&lt;選択可能最大数&gt;(blist);
	/// </code>
	/// </para>
	/// </examples>
	/// <para>選択可能最大数には最大で16まで指定することが出来る。</para>
	/// <para>又、選択するわけではなく、リストを見せるだけの場合は0を指定すると良い。</para>
	/// </summary>
	/// <param name="選択可能最大数">
	/// <para>選択可能最大数には最大で16まで指定することが出来る。</para>
	/// <para>又、選択するわけではなく、リストを見せるだけの場合は0を指定すると良い。</para>
	/// </param>
	/// <param name="武将番号【配列用】リスト">リストに表示する武将の「武将番号【配列用】」を番号リスト型にして、引数として渡す。</param>
	/// <param name="カラムオプション">
	/// 「カラム::武将」以下から複数を組み合わせて、表示カラムを絞ることが出来る。
	/// <para>何も指定しなかった場合は、「カラム::武将::デフォルト」が使われる</para>
	/// <para>例：</para>
	/// <para>　カラム::武将::身分|カラム::武将::特殊兵科</para>
	/// </param>
	/// <returns>
	/// <para>選択した複数の武将「武将番号【配列用】」が番号リスト型で返ってくる。</para>
	/// <para>何も選択しなかった場合、要素数が０の番号リスト型が返ってくる。</para>
	/// </returns >
	番号リスト型 選択武将ダイアログ表示(番号リスト型 武将番号【配列用】リスト, __int64 カラムオプション = カラム::武将::デフォルト) {
		return _SelectBushouMultiDialog(武将番号【配列用】リスト, カラムオプション, 選択可能最大数);
	}

}



namespace 関数 {

	/// <summary>
	/// 複数の城リストから１つ選択するダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　選択した「城番号【配列用】」が返ってくる。</para>
	/// <para>　何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="城番号【配列用】リスト">リストに表示する城の「城番号【配列用】」を番号リスト型にして、引数として渡す。</param>
	/// <param name="カラムオプション">
	/// 「カラム::城」以下から複数を組み合わせて、表示カラムを絞ることが出来る。
	/// <para>何も指定しなかった場合は、「カラム::城::デフォルト」が使われる</para>
	/// <para>例：</para>
	/// <para>　カラム::城::金山|カラム::城::兵士</para>
	/// </param>
	/// <returns>
	/// <para>リストから選択した城の「城番号【配列用】」が返ってくる。</para>
	/// <para>何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </returns >
	int 選択城ダイアログ表示(番号リスト型 城番号【配列用】リスト, int カラムオプション = カラム::城::デフォルト);
}


namespace 関数 {

	/// <summary>
	/// 複数の家宝リストから１つ選択するダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　選択した「家宝番号【配列用】」が返ってくる。</para>
	/// <para>　何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="家宝番号【配列用】リスト">リストに表示する家宝の「家宝番号【配列用】」を番号リスト型にして、引数として渡す。</param>
	/// <param name="カラムオプション">
	/// 「カラム::家宝」以下から複数を組み合わせて、表示カラムを絞ることが出来る。
	/// <para>何も指定しなかった場合は、「カラム::家宝::デフォルト」が使われる</para>
	/// <para>例：</para>
	/// <para>　カラム::家宝::種類|カラム::家宝::所有者</para>
	/// </param>
	/// <returns>
	/// <para>リストから選択した家宝の「家宝番号【配列用】」が返ってくる。</para>
	/// <para>何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </returns >
	int 選択家宝ダイアログ表示(番号リスト型 家宝番号【配列用】リスト, int カラムオプション = カラム::家宝::デフォルト);
}


namespace 関数 {

	/// <summary>
	/// 複数の官位リストから１つ選択するダイアログを出す。
	/// <para>プレイヤターンが回ってきた時や、軍団ターン変更時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// <para>　選択した「官位番号【配列用】」が返ってくる。</para>
	/// <para>　何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="官位番号【配列用】リスト">リストに表示する官位の「官位番号【配列用】」を番号リスト型にして、引数として渡す。</param>
	/// <param name="カラムオプション">
	/// 「カラム::官位」以下から複数を組み合わせて、表示カラムを絞ることが出来る。
	/// <para>何も指定しなかった場合は、「カラム::官位::デフォルト」が使われる</para>
	/// <para>例：</para>
	/// <para>　カラム::官位::種類|カラム::官位::所有者</para>
	/// </param>
	/// <returns>
	/// <para>リストから選択した官位の「官位番号【配列用】」が返ってくる。</para>
	/// <para>何も選択しなかった場合、0xFFFFが返ってくる。</para>
	/// </returns >
	int 選択官位ダイアログ表示(番号リスト型 官位番号【配列用】リスト, int カラムオプション = カラム::官位::デフォルト);
}


namespace 関数 {


	/// <summary>
	/// 確認用のダイアログを表示する。
	/// <para>プレイヤターンが回ってきた時や、ターン切り替え時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// </summary>
	/// <param name="ダイアログ文字列">ダイアログに表示する文字列</param>
	void 確認ダイアログ表示(string ダイアログ文字列);


	/// <summary>
	/// 情報用のダイアログを表示する。
	/// <para>プレイヤターンが回ってきた時や、ターン切り替え時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// </summary>
	/// <param name="ダイアログ文字列">ダイアログに表示する文字列</param>
	void 情報ダイアログ表示(string ダイアログ文字列);


	/// <summary>
	/// 警告用のダイアログを表示する。
	/// <para>プレイヤターンが回ってきた時や、ターン切り替え時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// </summary>
	/// <param name="ダイアログ文字列">ダイアログに表示する文字列</param>
	void 警告ダイアログ表示(string ダイアログ文字列);


	/// <summary>
	/// 情報用のフレームタイプのダイアログを表示する。
	/// <para>プレイヤターンが回ってきた時や、ターン切り替え時など、他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// </summary>
	/// <param name="ダイアログ文字列">ダイアログに表示する文字列</param>
	void 情報フレームダイアログ表示(string ダイアログ文字列);
}




namespace 関数 {

	/// <summary>
	/// 画像を表示するダイアログを出す。
	/// <para>他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// </summary>
	/// <param name="画像ファイル名">表示する画像ファイルの名前。</param>
	/// <param name="Ｘ座標">ダイアログを表示する際の左上のＸ座標。指定しなければ、ダイアログの左右は中央になるように値が調整される。</param>
	/// <param name="Ｙ座標">ダイアログを表示する際の左上のＹ座標。指定しなければ、ダイアログの上下は中央になるように値が調整される。</param>
	/// <param name="終了タイム">
	/// <para>・「画像ダイアログ::自動終了」… 天翔記の設定に応じた時間で自動的に画像ダイアログを閉じる。</para>
	/// <para>・「画像ダイアログ::手動終了」… プレイヤーが何らかのマウスボタン等を押すまで画像ダイアログを表示し続ける。</para>
	/// <para>・もしくは、「2000」など画像ダイアログが終了するまでの時間をミリ秒で指定する。</para>
	/// </param>
	int 画像ダイアログ表示(string 画像ファイル名, int Ｘ座標 = -1, int Ｙ座標 = -1, int 終了タイム = 画像ダイアログ::自動終了);


	/// <summary>
	/// 画像リソースが埋め込まれているDLLが利用可能なよう、ScenarioModに登録する。
	/// <param name="画像ＤＬＬ名">登録対象のDLL名。</param>
	/// <para>返り値：</para>
	/// <para>　ファイルが無い、あるいは不正などの場合FALSEが返ってくる。</para>
	/// </summary>
	/// <returns>ファイルが無い、あるいは不正などの場合FALSEが返ってくる。</returns >
	BOOL Set_画像ＤＬＬ追加(string 画像ＤＬＬ名);

	/// <summary>
	/// 画像を表示するダイアログを出す。
	/// <para>外部ファイルではなく、DLL等に埋め込まれたリソースを使うタイプ。</para>
	/// <para>この関数を利用する場合は、事前に「Set_画像ＤＬＬ追加」でDLLを登録しておく必要がある。</para>
	/// <para>他に邪魔なダイアログが出ていない時に、利用が可能である。</para>
	/// <para>返り値：</para>
	/// </summary>
	/// <param name="画像源">表示する画像源となるリソースとしてのシンボル名。</param>
	/// <param name="画像ＤＬＬ名">リソースが埋め込まれたDLL名。</param>
	/// <param name="Ｘ座標">ダイアログを表示する際の左上のＸ座標。指定しなければ、ダイアログの左右は中央になるように値が調整される。</param>
	/// <param name="Ｙ座標">ダイアログを表示する際の左上のＹ座標。指定しなければ、ダイアログの上下は中央になるように値が調整される。</param>
	/// <param name="終了タイム">
	/// <para>・「画像ダイアログ::自動終了」… 天翔記の設定に応じた時間で自動的に画像ダイアログを閉じる。</para>
	/// <para>・「画像ダイアログ::手動終了」… プレイヤーが何らかのマウスボタン等を押すまで画像ダイアログを表示し続ける。</para>
	/// <para>・もしくは、「2000」など画像ダイアログが終了するまでの時間をミリ秒で指定する。</para>
	/// </param>
	int 画像ダイアログ表示(string 画像源, string 画像ＤＬＬ名, int Ｘ座標 = -1, int Ｙ座標 = -1, int 終了タイム = 画像ダイアログ::自動終了);
}


// 吹き出しダイアログは、「開始」したものは、かならず「終了」しなければならない。
namespace 関数 {

	/// <summary>
	/// 武将同士が会話するための「左上」に表示される噴き出しダイアログを開始する。
	/// <para>この関数を利用する場合、必ず最後に「噴出ダイアログ《通常・左上》終了()」を呼び出して、</para>
	/// <para>「左上」の噴き出しダイアログを閉じる必要がある。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <param name="メッセージ">噴き出しとして表示したいメッセージ文字列。</param>
	void 噴出ダイアログ《通常・左上》開始(int 武将番号【配列用】, string メッセージ);

	/// <summary>
	/// 武将同士が会話する「左上」に既に表示されている噴き出しダイアログのメッセージを更新する。
	/// </summary>
	/// <param name="武将番号【配列用】">「噴出ダイアログ《通常・左上》開始」で指定した「武将番号【配列用】」と同じものを指定しておくこと。</param>
	/// <param name="メッセージ">噴き出しとして表示したいメッセージ文字列。</param>
	void 噴出ダイアログ《通常・左上》更新(int 武将番号【配列用】, string メッセージ);

	/// <summary>
	/// 武将同士が会話する「左上」に既に表示されている噴き出しダイアログを終了する。
	/// </summary>
	void 噴出ダイアログ《通常・左上》終了();



	/// <summary>
	/// 武将同士が会話するための「右下」に表示されている噴き出しダイアログを開始する。
	/// <para>この関数を利用する場合、必ず最後に「噴出ダイアログ《通常・右下》終了()」を呼び出して、</para>
	/// <para>「右下」の噴き出しダイアログを閉じる必要がある。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <param name="メッセージ">噴き出しとして表示したいメッセージ文字列。</param>
	void 噴出ダイアログ《通常・右下》開始(int 武将番号【配列用】, string メッセージ);

	/// <summary>
	/// 武将同士が会話する「右下」に既に表示される噴き出しダイアログのメッセージを更新する。
	/// </summary>
	/// <param name="武将番号【配列用】">「噴出ダイアログ《通常・右下》開始」で指定した「武将番号【配列用】」と同じものを指定しておくこと。</param>
	/// <param name="メッセージ">噴き出しとして表示したいメッセージ文字列。</param>
	void 噴出ダイアログ《通常・右下》更新(int 武将番号【配列用】, string メッセージ);

	/// <summary>
	/// 武将同士が会話する「右下」に既に表示されている噴き出しダイアログを終了する。
	/// </summary>
	void 噴出ダイアログ《通常・右下》終了();


	/// <summary>
	/// 戦場で武将がセリフを出すための噴き出しダイアログを中央に表示する。
	/// <para>「野戦中」と「攻城戦中」のみ利用可能。
	/// <para>この関数は終了関数を呼ぶ必要はない</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <param name="メッセージ">噴き出しとして表示したいメッセージ文字列。</param>
	void 噴出ダイアログ《戦場・中央》表示(int 武将番号【配列用】, string メッセージ);
}



/// <summary>
/// 「数値入力ダイアログ実行時(...)」メソッドのパラメタ
/// </summary>
struct 数値入力ダイアログパラメタ型 {
	int 最小値;
	int 最大値;
	int 入力値;						// 0xFFFFならキャンセルした
};

