/*
 * 家宝情報型
 */
#pragma once
#pragma pack(1)

#include <windows.h>

#include "家宝情報列挙.h"

/*
	[家宝(19*120)]

	0-12	名前
	13	分類
			0 茶碗     1 茶壺     2 茶入    3 茶釜        4 花入    5 刀剣      6 槍        7 具足   8 馬 
			9 鞍       A 陣羽織   B 巻子本  C 明朝綴本    D 香木    E 地球儀    F 南蛮時計 10 水墨画
			11 十字架  12 聖書    13 玉手箱 14 ビードロ杯 15 遠眼鏡 16 ルソン壺 17 煙草
	14	画像
	15-16	所持武将
	17	0000AAAA A = 上昇値
	18	AB000000 A = 消失  B = 未登場
*/
struct 家宝情報型
{
	char _家宝名[13];			// 名前
	byte 家宝分類;				/// <summary> <para>分類番号。「家宝分類::茶碗〜家宝分類::煙草」に対応する。</para><para>値をセットする時は、「Set_家宝分類」の関数を利用すると、家宝上昇値変更に伴って、武将の最大能力の変化も自動で計算される。</para></summary>
	byte 家宝画像;				// 画像番号。「家宝画像::茶碗〜家宝画像::香木」に対応する。
	WORD 所有武将【武将番号】;	/// <summary><para>所有者。0xFFFFなら商人。</para><para>この値を直接書き換えるのではなく、「Set_家宝所有者変更」の関数を利用すると、家宝所有者変更に伴って、武将の最大能力の変化も自動で計算される。</para></summary>
	byte 上昇値:4;				/// <summary><para>上昇値 (1〜10なので気をつけること) 。</para><para>値をセットする時は、「Set_家宝上昇値」の関数を利用すると、家宝上昇値変更に伴って、武将の最大能力の変化も自動で計算される。</para></summary>
	byte _未定義0:4;			// 0
	byte _未定義1:6;			//
	byte 未登場:1;				/// <summary><para>未登場(1=未登場 0=登場)</para><para>値をセットする時は、先に家宝を商人に返してからセットすること。</para></summary>
	byte 消失:1;				/// <summary><para>消失(1=消失 0=存在)</para><para>値をセットする時は、先に家宝を商人に返してからセットすること。</para></summary>
};



namespace 関数 {


	/// <summary>
	/// 対象の家宝の名前を取得する。
	/// <para>返り値：対象の家宝の名前の文字列。最大で全角６文字。(12バイト)</para>
	/// </summary>
	/// <param name="家宝番号【配列用】">対象となる家宝の「配列用」の番号</param>
	/// <returns>対象の家宝の名前の文字列。最大で全角６文字。(12バイト)</returns>
	string Get_家宝名( int 家宝番号【配列用】);


	/// <summary>
	/// 対象の家宝の名前を設定する。
	/// </summary>
	/// <param name="家宝番号【配列用】">対象となる家宝の「配列用」の番号</param>
	/// <param name="家宝名">設定する家宝の名前の文字列。最大で全角６文字。(12バイト)</param>
	void Set_家宝名( int 家宝番号【配列用】, string 家宝名 );


	/// <summary>
	/// 家宝の｢名前｣に対応する『家宝の「配列用」の番号』を取得する。
	/// <para>返り値：家宝の「配列用」の番号</para>
	/// <para>対象の家宝が、その瞬間天翔記に登場しているか、していないかは関係なく、対象の家宝名に対応する番号が返る。</para>
	/// <para>そのような家宝が見つからなかった場合は0xFFFFが返ってくる。</para>
	/// </summary>
	/// <param name="家宝名">対象となる家宝の名称</param>
	/// <returns>返り値：家宝の「配列用」の番号</returns>
	WORD Get_家宝番号【配列用】(string 家宝名);

	/// <summary>
	/// <para>対象の家宝の所有者を変更する。</para><para>未登場や消失の家宝に対して、この関数を実行すると家宝は登場する形となる。</para>
	/// <para></para>
	/// </summary>
	/// <param name="家宝番号【配列用】">対象となる家宝の「配列用」の番号</param>
	/// <param name="宛先武将番号【配列用】"><para>対象の家宝の「新しい所有者」とする武将の「配列用」の番号</para><para>商人に返却したい場合は、0xFFFFを指定する。</para></param>
	bool Set_家宝所有者変更(int 家宝番号【配列用】, int 宛先武将番号【配列用】);


	/// <summary>
	/// <para>対象の家宝の上昇値を変更する。</para><para>武将が持つ家宝に対して、この関数を実行すると家宝は登場する。</para><para>一方、商人が持っていた家宝の場合は、登場や消失フラグは維持される。</para>
	/// </summary>
	/// <param name="家宝番号【配列用】">対象となる家宝の「配列用」の番号</param>
	/// <param name="上昇値">1-10までの値</param>
	/// <returns>成功したらtrue、失敗したらfalse;</returns>
	bool Set_家宝上昇値(int 官位番号【配列用】, int 上昇値);


	/// <summary>
	/// <para>対象の家宝の分類を変更する。</para><para>武将が持つ家宝に対して、この関数を実行すると家宝は登場する。</para><para>一方、商人が持っていた家宝の場合は、登場や消失フラグは維持される。</para>
	/// </summary>
	/// <param name="家宝番号【配列用】">対象となる家宝の「配列用」の番号</param>
	/// <param name="家宝分類">「家宝分類::茶碗〜家宝分類::煙草」の値</param>
	/// <returns>成功したらtrue、失敗したらfalse;</returns>
	bool Set_家宝分類(int 官位番号【配列用】, int 家宝分類);
}



/// <summary>
/// 「戦国名物事典型＆ カスタム::On_戦国名物事典要求時(int 家宝番号 」メソッドの返り値の型
/// </summary>
struct 戦国名物事典型 {

public:
	string _ラベル;
	string _詳細;

public:
	/// <summary>
	/// 戦国名物事典を設定する。
	/// </summary>
	/// <param name="ラベル">戦国名物事典時に表示される、名前。36バイトまで。全角だと18文字。</param>
	/// <param name="詳細">戦国名物事典時に表示される、詳細な名物事典。全角だと18文字×４行。</param>
	inline 戦国名物事典型(string ラベル, string 詳細) {
		_ラベル = ラベル;
		_詳細 = 詳細;
	};

	// NULLリターンに対応するため。
	inline 戦国名物事典型(int iDefault) {}
};
#define 戦国名物事典型＆	戦国名物事典型
