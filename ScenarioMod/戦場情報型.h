/*
 * 武将情報型 及び、 武将戸籍情報型
 */
#pragma once
#pragma pack(1)

#include <windows.h>
#include <vector>

#include "２Ｄ位置情報型.h"
#include "３Ｄ位置情報型.h"

#include "戦場情報列挙.h"

using namespace std;


/// <summary>
/// 「カスタム::On_戦争開始」のメソッド用のパラメータ
/// </summary>
struct 戦争開始パラメタ型 {
	int 城番号;						// 標的の城番号
	int 守備側軍団【軍団番号】;		// 守備側の軍団番号
	int 守備側軍団長【武将番号】;	// 守備側の軍団長の武将番号
	int 攻撃側軍団【軍団番号】;		// 攻めた側の軍団番号
	int 攻撃側軍団長【武将番号】;	// 攻めた側の軍団長の武将番号
};


/// <summary>
/// 「カスタム::On_攻撃方法決定時《戦争画面》」のメソッド用のパラメータ
/// </summary>
struct 攻撃方法決定時パラメタ型 {
	int 攻撃方法番号;	/// <summary>「攻撃方法::攻撃」〜「攻撃方法::弓」のいずれかの値と比較する。</summary>
	int 移動前;
};


namespace 関数 {

	/// <summary>
	/// 現在進行中の戦争に関わっている大名勢力のリストを得る。
	/// <para>(※印出陣しているかどうかは関係ない)</para>
	/// <para>返り値：参戦している大名の、大名番号【配列用】を番号リスト型で得る。</para>
	/// </summary>
	/// <returns>参戦している大名の、大名番号【配列用】を番号リスト型で得る。</returns>
	番号リスト型 Get_参戦の大名番号リスト【配列用】();

	/// <summary>
	/// 現在進行中の戦争に関わっている軍団勢力のリストを得る。
	/// <para>(※印出陣しているかどうかは関係ない)</para>
	/// <para>返り値：参戦している軍団の、軍団番号【配列用】を番号リスト型で得る。</para>
	/// </summary>
	/// <returns>参戦している軍団の、軍団番号【配列用】を番号リスト型で得る。</returns>
	番号リスト型 Get_参戦の軍団番号リスト【配列用】();


	/// <summary>
	/// 該当の軍団の戦場における立場を返す。
	/// <para>返り値：「<see cref="参戦立場::不明"/>」〜「<see cref="参戦立場::中立軍"/>」のいずれかの値が返ってくる。</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <returns>「参戦立場::不明」〜「参戦立場::中立」</returns>
	int Get_軍団の参戦立場(int 軍団番号【配列用】);

	/// <summary>
	/// 該当の武将の戦場における立場を返す。
	/// <para>返り値：「<see cref="参戦立場::不明"/>」〜「<see cref="参戦立場::中立軍"/>」のいずれかの値が返ってくる。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <returns>「参戦立場::不明」〜「参戦立場::中立」</returns>
	int Get_武将の参戦立場(int 武将番号【配列用】);


	/// <summary>
	/// 現在の戦争において、指定の軍団の代表者の武将を返す。
	/// <para>(※代表者とは、軍団長や大名とは限らない。大名や軍団長が戦場に居ない場合などは、</para>
	/// <para>　 戦場にて最も相応しい者が代表者として天翔記システムにより選ばれている。)</para>
	/// <para>返り値：代表者である武将の「配列用」の番号を返す。</para>
	/// </summary>
	/// <param name="軍団番号【配列用】">対象となる軍団の「配列用」の番号</param>
	/// <returns>代表者である武将の「配列用」の番号を返す。</returns>
	int Get_参戦軍団の指揮者(int 軍団番号【配列用】);
}




namespace 関数 {

	/// <summary>
	/// 現在画面に出てる戦場は、野戦
	/// </summary>
	bool Is_野戦中();

	/// <summary>
	/// 現在画面に出てる戦場は、攻城戦
	/// </summary>
	bool Is_攻城戦中();

	/// <summary>
	/// <para>現在画面上で攻城戦をしている城の「配列用」の番号を得る。</para>
	/// <para>もしも、攻城戦をしていなければ、0xFFFFが返ってくる。</para>
	/// <para>返り値：</para>
	/// <para>　攻城戦をしている場合、城の「配列用」の番号が返ってくる。</para>
	/// <para>　攻城戦をしていなければ、0xFFFFが返ってくる。</para>
	/// </summary>
	/// <returns>
	/// <para>攻城戦をしている場合、城の「配列用」の番号が返ってくる。</para>
	/// <para>攻城戦をしていなければ、0xFFFFが返ってくる。</para>
	/// </returns>
	WORD Get_攻城戦中の城番号(); // 

	/// <summary>
	/// <para>(現在画面で行われている)戦争の残りターン数を得る</para>
	/// <para>「残りターン」とは、戦争中の画面で見えている「残り○○ターン」と出ている数値のこと。</para>
	/// <para>返り値：</para>
	/// <para>　戦争の残りターンが返ってくる。</para>
	/// <para>　戦争中でない場合には、-1が返ってくる。</para>
	/// </summary>
	/// <returns>
	/// <para>戦争の残りターンが返ってくる。</para>
	/// <para>戦争中でない場合には、-1が返ってくる。</para>
	/// </returns>
	int Get_戦争残りターン数();

	/// <summary>
	/// <para>(現在画面で行われている)攻城戦のターン数を得る</para>
	/// <para>「攻城戦のターン数」とは、攻城戦の画面で見えている３つの○の数（１〜３）のこと。</para>
	/// <para>返り値：</para>
	/// <para>　攻城戦のターン数が返ってくる。（１〜３）</para>
	/// <para>　攻城戦でない場合には、-1が返ってくる。</para>
	/// </summary>
	/// <returns>
	/// <para>攻城戦のターン数が返ってくる。（１〜３）</para>
	/// <para>攻城戦でない場合には、-1が返ってくる。</para>
	/// </returns>
	int Get_攻城戦ターン数();


	/// <summary>
	/// <para>現在の「戦域全域」を対象として出陣している武将のリストを得る。</para>
	/// <para>戦域全域とは、画面上に表示されていないような攻城戦などに出陣中の武将も含まれる。</para>
	/// <para>返り値：</para>
	/// <para>　出陣中の武将達の「武将番号【配列用】」が番号リスト型で返ってくる。</para>
	/// <para>　誰も出陣していない場合、要素数が０の番号リスト型が返ってくる。</para>
	/// </summary>
	/// <returns>
	/// <para>出陣中の武将達の「武将番号【配列用】」が番号リスト型で返ってくる。</para>
	/// <para>誰も出陣していない場合、要素数が０の番号リスト型が返ってくる。</para>
	/// </returns>
	番号リスト型 Get_出陣中の武将番号リスト【配列用】();

	/// <summary>
	/// <para>現在表示中の戦闘マップに出陣している武将番号配列用のリストを得る。</para>
	/// <para>現在表示されているマップのみが対象となる。(野戦マップもしくは特定の攻城戦マップ）</para>
	/// <para>返り値：</para>
	/// <para>　出陣中の武将達の「武将番号【配列用】」が番号リスト型で返ってくる。</para>
	/// <para>　誰も出陣していない場合、要素数が０の番号リスト型が返ってくる。</para>
	/// </summary>
	/// <returns>
	/// <para>出陣中の武将達の「武将番号【配列用】」が番号リスト型で返ってくる。</para>
	/// <para>誰も出陣していない場合、要素数が０の番号リスト型が返ってくる。</para>
	/// </returns>
	番号リスト型 Get_出陣中の武将番号リスト【配列用】《表示中マップ》();

}


namespace 関数 {


	/// <summary>
	/// 戦場において、該当の武将が、既に行動済かどうかを得る。
	/// <para>返り値：行動済みなら真が、未行動なら偽が返ってくる。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <returns>行動済みなら真が、未行動なら偽が返ってくる。</returns>
	bool Is_武将行動済《戦争画面》(int 武将番号【配列用】);


	/// <summary>
	/// 戦場において、該当の武将の混乱状態を得る。
	/// <para>返り値：「混乱状態::無し」〜「混乱状態::挑発混乱」の値が返ってくる。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <returns>「混乱状態::無し」〜「混乱状態::挑発混乱」の値が返ってくる。</returns>
	int Get_武将混乱状態(int 武将番号【配列用】);

	/// <summary>
	/// 戦場において、該当の武将を混乱状態を変更する。
	/// <para>この関数を実行しても、内部的な値を変更するだけで、画面上のユニットのアイコンに混乱状態の変更反映されない。</para>
	/// <para>「武将ユニット状態描画更新《戦争画面》」の関数を呼び出すことで画面上に反映させることが出来る。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <param name="混乱状態">「混乱状態::無し」〜「混乱状態::挑発混乱」のいずれかを設定する。</param>
	/// <returns>「混乱状態::無し」〜「混乱状態::挑発混乱」の値が返ってくる。</returns>
	bool Set_武将混乱状態(int 武将番号【配列用】, int 混乱状態);


	/// <summary>
	/// 戦場において、対象の武将の移動力の残量値を取得する。
	/// <para>返り値：通常 0〜15 の程度の値</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <returns>通常 0〜15 の程度の値</returns>
	int Get_武将移動力残量(int 武将番号【配列用】);

	/// <summary>
	/// 戦場において、対象の武将の移動力の残量値を設定する。
	/// <para>返り値：戦場に対象の武将が居ない場合は、0xFFFFの値が返ってくる。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <param name="移動力残量">天翔記の本来の仕様に従えば、通常0〜15程度の値を設定する。より大きな値を設定することも可能。</param>
	/// <returns>戦場に対象の武将が居ない場合は、0xFFFFの値が返ってくる。</returns>
	int Set_武将移動力残量(int 武将番号【配列用】, int 移動力残量);


	/// <summary>
	/// 対象の武将の兵数を、描画上のユニットアイコンに反映させる。
	/// <para>兵数を変更しただけでは、画面上にそのことが伝達されないため、</para>
	/// <para>反映したい場合には、この関数を呼び出す。</para>
	/// <para>この関数で手動で更新する。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	void 武将ユニット兵数描画更新《戦争画面》(int 武将番号【配列用】);

	/// <summary>
	/// 対象の武将の大混乱や混乱などの状態を、描画上のユニットアイコンに反映させる。
	/// <para>武将を混乱状態や挑発混乱状態に設定しただけでは、ユニットの画像アイコンは更新されないため、</para>
	/// <para>反映したい場合には、この関数を呼び出す。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	void 武将ユニット状態描画更新《戦争画面》(int 武将番号【配列用】);
}



//-------------戦争のヘックス位置やヘックス情報関連---------------------------------------------------------------

namespace 野戦ヘックス {
	const int 中心Ｘ = 20; ///<summary>野戦の画面の中心Ｘの想定位置。</summary>
	const int 中心Ｙ = 12; ///<summary>野戦の画面の中心Ｙの想定位置。</summary>
}
namespace 攻城戦ヘックス {
	const int 中心Ｘ = 9;  ///<summary>攻城戦の画面の中心Ｘの想定位置。</summary>
	const int 中心Ｙ = 8;  ///<summary>攻城戦の画面の中心Ｘの想定位置。</summary>
}


/// <summary>
/// ヘックスの座標軸系。
/// 画面に対応させると、「Ｘ→  Ｙ↓」の方向で値が増加していく。
/// </summary>
struct ヘックス位置型 : public ２Ｄベクトル型 {
	ヘックス位置型(double Ｘ位置, double Ｙ位置) : Ｘ(Ｘ位置),Ｙ(Ｙ位置) {}
	ヘックス位置型() : Ｘ(0),Ｙ(0) {}
	double Ｘ; // Ｘ座標
	double Ｙ; // Ｙ座標
};

using ヘックス位置リスト型 = vector<ヘックス位置型>;

/// <summary>
/// ヘックス座標のベクトル。
/// 画面に対応させると、「Ｘ→  Ｙ↓」の方向で値が増加していく。
/// </summary>
struct ヘックスベクトル型 : public ２Ｄベクトル型 {
	ヘックスベクトル型(double Ｘ成分, double Ｙ成分) : Ｘ(Ｘ成分),Ｙ(Ｙ成分) {}
	ヘックスベクトル型() : Ｘ(0),Ｙ(0) {}
	double Ｘ; // Ｘ成分
	double Ｙ; // Ｙ成分
};


namespace 関数 {

	/// <summary>
	/// ２点間の座標の差によって、ヘックスベクトルが得られる。
	/// ヘックス位置同志の減算。「座標Ａ→座標Ｂ」へのベクトルを求めるのに、Ｂ−Ａを頻繁にするだろうから。
	/// </summary>
	ヘックスベクトル型 operator-(ヘックス位置型 &p1, ヘックス位置型 &p2);

}




namespace 関数 {

	/// <summary>
	/// <para>野戦のヘックスマップ上において、指定位置のヘックスチップとしての役割を得る。</para>
	/// <para>返り値：</para>
	/// <para>　「野戦ヘックス役割::枠外」〜「野戦ヘックス役割::城」が返ってくる。</para>
	/// <para>　座標がマップ内を指していない場合は-1</para>
	/// </summary>
	/// <param name="Ｘ位置">指定のＸの位置</param>
	/// <param name="Ｙ位置">指定のＹの位置</param>
	/// <returns>
	/// <para>「野戦ヘックス役割::枠外」〜「野戦ヘックス役割::城」が返ってくる。</para>
	/// <para>座標がマップ内を指していない場合は-1</para>
	/// </returns>
	int Get_野戦ヘックス役割(double Ｘ位置, double Ｙ位置);

	/// <summary>
	/// <para>野戦のヘックスマップ上において、指定位置のヘックスチップとしての役割を得る。</para>
	/// <para>返り値：</para>
	/// <para>　「野戦ヘックス役割::枠外」〜「野戦ヘックス役割::城」が返ってくる。</para>
	/// <para>　座標がマップ内を指していない場合は-1</para>
	/// </summary>
	/// <param name="Ｐ">指定のヘックス位置</param>
	/// <returns>
	/// <para>「野戦ヘックス役割::枠外」〜「野戦ヘックス役割::城」が返ってくる。</para>
	/// <para>座標がマップ内を指していない場合は-1</para>
	/// </returns>
	int Get_野戦ヘックス役割(ヘックス位置型 Ｐ);

	/// <summary>
	/// <para>指定のヘックスチップとしての役割を満たす、野戦ヘックス位置のリストを得る</para>
	/// <para>返り値：</para>
	/// <para>その役割を満たすヘックス位置のリストが返ってくる。</para>
	/// </summary>
	/// <param name="野戦ヘックス役割">「野戦ヘックス役割::枠外」〜「野戦ヘックス役割::城」を指定する</param>
	/// <returns>
	/// <para>その役割を満たすヘックス位置のリストが返ってくる。</para>
	/// </returns>
	ヘックス位置リスト型 Get_特定の役割の野戦ヘックス位置リスト(int 野戦ヘックス役割);

	/// <summary>
	/// <para>攻城戦のヘックスマップ上において、指定位置のヘックスチップとしての役割を得る。</para>
	/// <para>返り値：</para>
	/// <para>　「攻城戦ヘックス役割::枠外」〜「攻城戦ヘックス役割::本丸」が返ってくる。</para>
	/// <para>　座標がマップ内を指していない場合は-1</para>
	/// </summary>
	/// <param name="Ｘ位置">指定のＸの位置</param>
	/// <param name="Ｙ位置">指定のＹの位置</param>
	/// <returns>
	/// <para>「攻城戦ヘックス役割::枠外」〜「攻城戦ヘックス役割::本丸」が返ってくる。</para>
	/// <para>座標がマップ内を指していない場合は-1</para>
	/// </returns>
	int Get_攻城戦ヘックス役割(double Ｘ位置, double Ｙ位置);

	/// <summary>
	/// <para>攻城戦のヘックスマップ上において、指定位置のヘックスチップとしての役割を得る。</para>
	/// <para>返り値：</para>
	/// <para>　「攻城戦ヘックス役割::枠外」〜「攻城戦ヘックス役割::本丸」が返ってくる。</para>
	/// <para>　座標がマップ内を指していない場合は-1</para>
	/// </summary>
	/// <param name="Ｐ">指定のヘックス位置</param>
	/// <returns>
	/// <para>「攻城戦ヘックス役割::枠外」〜「攻城戦ヘックス役割::本丸」が返ってくる。</para>
	/// <para>座標がマップ内を指していない場合は-1</para>
	/// </returns>
	int Get_攻城戦ヘックス役割(ヘックス位置型 Ｐ) ;

	/// <summary>
	/// <para>指定のヘックスチップとしての役割を満たす、攻城戦のヘックス位置のリストを得る</para>
	/// <para>返り値：</para>
	/// <para>その役割を満たすヘックス位置のリストが返ってくる。</para>
	/// </summary>
	/// <param name="攻城戦ヘックス役割">「攻城戦ヘックス役割::枠外」〜「攻城戦ヘックス役割::本丸」を指定する</param>
	/// <returns>
	/// <para>その役割を満たすヘックス位置のリストが返ってくる。</para>
	/// </returns>
	ヘックス位置リスト型 Get_特定の役割の攻城戦ヘックス位置リスト(int 攻城戦ヘックス役割);

	/// <summary>
	/// <para>攻城戦のヘックスマップ上において、指定位置の高さを得る。</para>
	/// <para>(天翔記の攻城戦は２Ｄではあるが、城壁で囲まれていて、何層かに高さが設定されている。)</para>
	/// <para>返り値：</para>
	/// <para>　指定のヘックス位置の高さが返ってくる。</para>
	/// <para>　座標がマップ内を指していない場合は-1</para>
	/// </summary>
	/// <param name="Ｘ位置">指定のＸの位置</param>
	/// <param name="Ｙ位置">指定のＹの位置</param>
	/// <returns>
	/// <para>指定のヘックス位置の高さが返ってくる。</para>
	/// <para>座標がマップ内を指していない場合は-1</para>
	/// </returns>
	int Get_攻城戦ヘックス高さ(double Ｘ位置, double Ｙ位置);

	/// <summary>
	/// <para>攻城戦のヘックスマップ上において、指定位置の高さを得る。</para>
	/// <para>(天翔記の攻城戦は２Ｄではあるが、城壁で囲まれていて、何層かに高さが設定されている。)</para>
	/// <para>返り値：</para>
	/// <para>　指定のヘックス位置の高さが返ってくる。</para>
	/// <para>　座標がマップ内を指していない場合は-1</para>
	/// </summary>
	/// <param name="Ｐ">指定のヘックス位置</param>
	/// <returns>
	/// <para>指定のヘックス位置の高さが返ってくる。</para>
	/// <para>座標がマップ内を指していない場合は-1</para>
	/// </returns>
	int Get_攻城戦ヘックス高さ(ヘックス位置型 Ｐ);


	/// <summary>
	/// <para>攻城戦のヘックスマップ上において、指定位置が炎上しているかどうかを得る。</para>
	/// <para>返り値：</para>
	/// <para>・炎上しているなら「攻城戦ヘックス炎上::炎上」</para>
	/// <para>・炎上していないなら「攻城戦ヘックス炎上::無し」</para>
	/// <para>・座標がマップ内を指していない場合は-1</para>
	/// <para>が返ってくる。</para>
	/// </summary>
	/// <param name="Ｘ位置">指定のＸの位置</param>
	/// <param name="Ｙ位置">指定のＹの位置</param>
	/// <returns>
	/// <para>・炎上しているなら「攻城戦ヘックス炎上::炎上」</para>
	/// <para>・炎上していないなら「攻城戦ヘックス炎上::無し」</para>
	/// <para>・座標がマップ内を指していない場合は-1</para>
	/// <para>が返ってくる</para>
	/// </returns>
	int Get_攻城戦ヘックス炎上(double Ｘ位置, double Ｙ位置);

	/// <summary>
	/// <para>攻城戦のヘックスマップ上において、指定位置が炎上しているかどうかを得る。</para>
	/// <para>返り値：</para>
	/// <para>・炎上しているなら「攻城戦ヘックス炎上::炎上」</para>
	/// <para>・炎上していないなら「攻城戦ヘックス炎上::無し」</para>
	/// <para>・座標がマップ内を指していない場合は-1</para>
	/// <para>が返ってくる。</para>
	/// </summary>
	/// <param name="Ｐ">指定のヘックス位置</param>
	/// <returns>
	/// <para>・炎上しているなら「攻城戦ヘックス炎上::炎上」</para>
	/// <para>・炎上していないなら「攻城戦ヘックス炎上::無し」</para>
	/// <para>・座標がマップ内を指していない場合は-1</para>
	/// <para>が返ってくる</para>
	/// </returns>
	int Get_攻城戦ヘックス炎上(ヘックス位置型 Ｐ);

	/// <summary>
	/// <para>攻城戦で炎上しているヘックス位置のリストを得る</para>
	/// <para>返り値：</para>
	/// <para>炎上しているヘックス位置のリストが返ってくる。</para>
	/// </summary>
	/// <param name="攻城戦ヘックス炎上">「攻城戦ヘックス役割::枠外」〜「攻城戦ヘックス役割::本丸」を指定する</param>
	/// <returns>
	/// <para>指定した炎上状態のヘックス位置のリストが返ってくる。</para>
	/// </returns>
	ヘックス位置リスト型 Get_炎上の攻城戦ヘックス位置リスト(int 攻城戦ヘックス炎上 = 攻城戦ヘックス炎上::炎上);

	/// <summary>
	/// <para>ヘックスマップ上において、Ｐ１の位置と、Ｐ２の位置で、「何マス」離れているのかを得る。</para>
	/// <para>移動経路などは一切考慮しない。全てのマスは移動可能なものとして計算する。</para>
	/// <para>(Ｐ１にある駒を何マス移動すれば、Ｐ２にたどり着けるのか？ という値だと思えばよい。)</para>
	/// <para>返り値：Ｐ１とＰ２の間隔</para>
	/// </summary>
	/// <param name="Ｐ１">１つ目のヘックス上の位置。</param>
	/// <param name="Ｐ２">２つ目のヘックス上の位置。</param>
	/// <returns>Ｐ１とＰ２の間隔。</returns>
	int Get_ヘックス間隔(ヘックス位置型 Ｐ１, ヘックス位置型 Ｐ２);


	/// <summary>
	/// 指定の武将が野戦マップ上のどこにいるのか、を得る。
	/// <para>返り値：野戦でのヘックス位置型で返す。</para>
	/// <para>表示中のマップに居ない場合、野戦ヘックス位置型のＰ(x=0xFFFF, y=0xFFFF) が返ってくる。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <returns>野戦でのヘックス位置型で返す。</returns>
	ヘックス位置型 Get_武将の野戦ヘックス位置(int 武将番号【配列用】);

	/// <summary>
	/// 指定の武将が攻城戦マップ上のどこにいるのか、を得る。
	/// <para>返り値：攻城戦でのヘックス位置型で返す。</para>
	/// <para>表示中のマップに居ない場合、攻城戦ヘックス位置型のＰ(x=0xFFFF, y=0xFFFF) が返ってくる。</para>
	/// </summary>
	/// <param name="武将番号【配列用】">対象となる武将の「配列用」の番号</param>
	/// <returns>攻城戦でのヘックス位置型で返す。</returns>
	ヘックス位置型 Get_武将の攻城戦ヘックス位置(int 武将番号【配列用】);

	/// <summary>
	/// 野戦でのヘックスの座標→普通の３次元座標(左手デカルト)へと変換する。
	/// <para>返り値：野戦でのヘックスでの位置Ｐに対応する、空間での座標を返す。</para>
	/// </summary>
	/// <param name="Ｐ">野戦でのヘックスの位置</param>
	/// <returns>野戦ヘックスでの位置Ｐに対応する、空間での座標を返す。</returns>
	３Ｄ位置型 野戦ヘックス位置→３Ｄ位置(ヘックス位置型 Ｐ);

	/// <summary>
	/// 普通の３次元座標(左手デカルト)→野戦でのヘックスの座標へと変換する。
	/// <para>返り値：野戦でのヘックス位置型で返す。</para>
	/// </summary>
	/// <param name="Ｐ">普通の３次元座標。座標軸は左手デカルト。</param>
	/// <returns>野戦でのヘックス位置型で返す。</returns>
	ヘックス位置型 ３Ｄ位置→野戦ヘックス位置(３Ｄ位置型 Ｐ);

	/// <summary>
	/// 攻城戦でのヘックスの座標→普通の３次元座標(左手デカルト)へと変換する。
	/// <para>返り値：攻城戦でのヘックスでの位置Ｐに対応する、空間での座標を返す。</para>
	/// </summary>
	/// <param name="Ｐ">攻城戦でのヘックスの位置</param>
	/// <returns>攻城戦ヘックスでの位置Ｐに対応する、空間での座標を返す。</returns>
	３Ｄ位置型 攻城戦ヘックス位置→３Ｄ位置(ヘックス位置型 Ｐ);

	/// <summary>
	/// 普通の３次元座標(左手デカルト)→攻城戦でのヘックスの座標へと変換する。
	/// <para>返り値：攻城戦でのヘックス位置型で返す。</para>
	/// </summary>
	/// <param name="Ｐ">普通の３次元座標。座標軸は左手デカルト。</param>
	/// <returns>攻城戦でのヘックス位置型で返す。</returns>
	ヘックス位置型 ３Ｄ位置→攻城戦ヘックス位置(３Ｄ位置型 Ｐ);
}



